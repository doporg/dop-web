(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("moment"), require("antd"), require("lodash"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["moment", "antd", "lodash", "react"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("moment"), require("antd"), require("lodash"), require("react")) : factory(root["moment"], root["antd"], root["lodash"], root["React"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 得到一个数组
 * @param length 数组长度
 * @param beginNum 第一个元素值
 */
Object.defineProperty(exports, "__esModule", { value: true });
function getArr(length, beginNum, arr) {
    if (beginNum === void 0) { beginNum = 0; }
    if (arr === void 0) { arr = []; }
    if (length <= 0) {
        return arr;
    }
    return getArr(length - 1, beginNum + 1, arr.concat([beginNum]));
}
exports.getArr = getArr;
var LangEnum;
(function (LangEnum) {
    LangEnum["zh_CN"] = "zh_CN";
    LangEnum["en_US"] = "en_US";
    LangEnum["zh_TW"] = "zh_TW";
})(LangEnum = exports.LangEnum || (exports.LangEnum = {}));
// 中文简体
var I18NList = {
    expTitle: 'cron 表达式',
    recentTimes: '最近的生成时间',
    start: '开始',
    end: '结束',
    step: '间隔',
    stepMinuteUnit: '分钟',
    stepHourUnit: '小时',
    hourUnit: '时',
    period: '时间段',
    point: '时间点',
    timing: '定时',
    translateMap: {
        day: '日',
        week: '周',
        month: '月',
        hour: '小时',
        minute: '分钟'
    },
    weekItemsList: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayItemsList: getArr(31, 1).map(function (num) { return num + "\u65E5"; }),
    errorCronExp: 'cron表达式语法错误'
};
// 中文繁体
var I18NList_traditional = {
    expTitle: 'cron 表達式',
    recentTimes: '最近的生成時間',
    start: '開始',
    end: '結束',
    step: '間隔',
    stepMinuteUnit: '分鐘',
    stepHourUnit: '小時',
    hourUnit: '時',
    period: '時間段',
    point: '時間點',
    timing: '定時',
    translateMap: {
        day: '日',
        week: '周',
        month: '月',
        hour: '小時',
        minute: '分鐘'
    },
    weekItemsList: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayItemsList: getArr(31, 1).map(function (num) { return num + "\u65E5"; }),
    errorCronExp: 'cron表達式語法錯誤'
};
/**
 * 得到一个I18N json
 * @param lang 语言
 */
function getI18N(lang) {
    if (lang === void 0) { lang = LangEnum.zh_CN; }
    if (lang === LangEnum.zh_CN) {
        return I18NList;
    }
    else if (lang === LangEnum.en_US) {
        I18NList = {
            expTitle: 'cron expression',
            recentTimes: 'Recently generated time',
            start: 'Start',
            end: 'End',
            step: 'Interval',
            stepMinuteUnit: 'Minute',
            stepHourUnit: 'Hour',
            hourUnit: ':00',
            period: 'Time Period',
            point: 'Time Point',
            timing: 'Timed Dispatch',
            translateMap: {
                day: 'Day',
                week: 'Week',
                month: 'Month',
                hour: 'Hour',
                minute: 'Minute'
            },
            weekItemsList: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayItemsList: getArr(31, 1).map(function (num) {
                var day;
                if (num === 1 || num === 21 || num === 31) {
                    day = num + "st";
                }
                else if (num === 2 || num === 22) {
                    day = num + "nd";
                }
                else if (num === 3 || num === 23) {
                    day = num + "rd";
                }
                else {
                    day = num + "th";
                }
                return day;
            }),
            errorCronExp: 'Sorry,there has syntax error in Cron Expression.'
        };
    }
    else if (lang === LangEnum.zh_TW) {
        I18NList = I18NList_traditional;
    }
    return I18NList;
}
exports.getI18N = getI18N;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Validates a cron expression.
 *
 * @param cronExpression The expression to validate
 * @return True is expression is valid
 */
function cronValidate(cronExpression) {
    var cronParams = cronExpression ? cronExpression.split(" ") : "";
    if (cronParams.length < 6 || cronParams.length > 7) {
        return false;
    }
    if (cronParams[3] == "?" || cronParams[5] == "?") {
        //Check seconds param
        if (!checkSecondsField(cronParams[0])) {
            return false;
        }
        //Check minutes param
        if (!checkMinutesField(cronParams[1])) {
            return false;
        }
        //Check hours param
        if (!checkHoursField(cronParams[2])) {
            return false;
        }
        //Check day-of-month param
        if (!checkDayOfMonthField(cronParams[3])) {
            return false;
        }
        //Check months param
        if (!checkMonthsField(cronParams[4])) {
            return false;
        }
        //Check day-of-week param
        if (!checkDayOfWeekField(cronParams[5])) {
            return false;
        }
        //Check year param
        if (cronParams.length == 7) {
            if (!checkYearField(cronParams[6])) {
                return false;
            }
        }
        return true;
    }
    else {
        return false;
    }
}
exports.cronValidate = cronValidate;
function checkSecondsField(secondsField) {
    return checkField(secondsField, 0, 59);
}
function checkField(secondsField, minimal, maximal) {
    if (secondsField.indexOf("-") > -1) {
        var startValue = secondsField.substring(0, secondsField.indexOf("-"));
        var endValue = secondsField.substring(secondsField.indexOf("-") + 1);
        if (!(checkIntValue(startValue, minimal, maximal, true) &&
            checkIntValue(endValue, minimal, maximal, true))) {
            return false;
        }
        try {
            var startVal = parseInt(startValue, 10);
            var endVal = parseInt(endValue, 10);
            return endVal >= startVal;
        }
        catch (e) {
            return false;
        }
    }
    else if (secondsField.indexOf(",") > -1) {
        return checkListField(secondsField, minimal, maximal);
    }
    else if (secondsField.indexOf("/") > -1) {
        return checkIncrementField(secondsField, minimal, maximal);
    }
    else if (secondsField.indexOf("*") != -1) {
        return true;
    }
    else {
        return checkIntValue(secondsField, minimal, maximal);
    }
}
function checkIntValue(value, minimal, maximal, checkExtremity) {
    try {
        if (value.indexOf("/") > -1) {
            return true;
        }
        else {
            var val = parseInt(value, 10);
            //判断是否为整数
            if (Number(value) === val) {
                if (checkExtremity) {
                    if (val < minimal || val > maximal) {
                        return false;
                    }
                }
                return true;
            }
        }
    }
    catch (e) {
        return false;
    }
}
function checkMinutesField(minutesField) {
    return checkField(minutesField, 0, 59);
}
function checkHoursField(hoursField) {
    return checkField(hoursField, 0, 23);
}
function checkDayOfMonthField(dayOfMonthField) {
    // 多个时间
    if (dayOfMonthField.indexOf(",")) {
        return true;
    }
    if (dayOfMonthField == "?") {
        return true;
    }
    if (dayOfMonthField.indexOf("L") >= 0) {
        return checkFieldWithLetter(dayOfMonthField, "L", 1, 7, -1, -1);
    }
    else if (dayOfMonthField.indexOf("W") >= 0) {
        return checkFieldWithLetter(dayOfMonthField, "W", 1, 31, -1, -1);
    }
    else if (dayOfMonthField.indexOf("C") >= 0) {
        return checkFieldWithLetter(dayOfMonthField, "C", 1, 31, -1, -1);
    }
    else {
        return checkField(dayOfMonthField, 1, 31);
    }
}
function checkMonthsField(monthsField) {
    monthsField.replace("JAN", "1");
    monthsField.replace("FEB", "2");
    monthsField.replace("MAR", "3");
    monthsField.replace("APR", "4");
    monthsField.replace("MAY", "5");
    monthsField.replace("JUN", "6");
    monthsField.replace("JUL", "7");
    monthsField.replace("AUG", "8");
    monthsField.replace("SEP", "9");
    monthsField.replace("OCT", "10");
    monthsField.replace("NOV", "11");
    monthsField.replace("DEC", "12");
    return checkField(monthsField, 1, 31);
}
function checkDayOfWeekField(dayOfWeekField) {
    dayOfWeekField.replace("SUN", "1");
    dayOfWeekField.replace("MON", "2");
    dayOfWeekField.replace("TUE", "3");
    dayOfWeekField.replace("WED", "4");
    dayOfWeekField.replace("THU", "5");
    dayOfWeekField.replace("FRI", "6");
    dayOfWeekField.replace("SAT", "7");
    if (dayOfWeekField == "?") {
        return true;
    }
    if (dayOfWeekField.indexOf("L") >= 0) {
        return checkFieldWithLetter(dayOfWeekField, "L", 1, 7, -1, -1);
    }
    else if (dayOfWeekField.indexOf("C") >= 0) {
        return checkFieldWithLetter(dayOfWeekField, "C", 1, 7, -1, -1);
    }
    else if (dayOfWeekField.indexOf("#") >= 0) {
        return checkFieldWithLetter(dayOfWeekField, "#", 1, 7, 1, 5);
    }
    else {
        return checkField(dayOfWeekField, 1, 7);
    }
}
function checkYearField(yearField) {
    return checkField(yearField, 1970, 2099);
}
function checkFieldWithLetter(value, letter, minimalBefore, maximalBefore, minimalAfter, maximalAfter) {
    var canBeAlone = false;
    var canHaveIntBefore = false;
    var canHaveIntAfter = false;
    var mustHaveIntBefore = false;
    var mustHaveIntAfter = false;
    if (letter == "L") {
        canBeAlone = true;
        canHaveIntBefore = true;
        canHaveIntAfter = false;
        mustHaveIntBefore = false;
        mustHaveIntAfter = false;
    }
    if (letter == "W" || letter == "C") {
        canBeAlone = false;
        canHaveIntBefore = true;
        canHaveIntAfter = false;
        mustHaveIntBefore = true;
        mustHaveIntAfter = false;
    }
    if (letter == "#") {
        canBeAlone = false;
        canHaveIntBefore = true;
        canHaveIntAfter = true;
        mustHaveIntBefore = true;
        mustHaveIntAfter = true;
    }
    var beforeLetter = "";
    var afterLetter = "";
    if (value.indexOf(letter) >= 0) {
        beforeLetter = value.substring(0, value.indexOf(letter));
    }
    if (!value.endsWith(letter)) {
        afterLetter = value.substring(value.indexOf(letter) + 1);
    }
    if (value.indexOf(letter) >= 0) {
        if (letter == value) {
            return canBeAlone;
        }
        if (canHaveIntBefore) {
            if (mustHaveIntBefore && beforeLetter.length == 0) {
                return false;
            }
            if (!checkIntValue(beforeLetter, minimalBefore, maximalBefore, true)) {
                return false;
            }
        }
        else {
            if (beforeLetter.length > 0) {
                return false;
            }
        }
        if (canHaveIntAfter) {
            if (mustHaveIntAfter && afterLetter.length == 0) {
                return false;
            }
            if (!checkIntValue(afterLetter, minimalAfter, maximalAfter, true)) {
                return false;
            }
        }
        else {
            if (afterLetter.length > 0) {
                return false;
            }
        }
    }
    return true;
}
function checkIncrementField(value, minimal, maximal) {
    var start = value.substring(0, value.indexOf("/"));
    var increment = value.substring(value.indexOf("/") + 1);
    if (!("*" === start)) {
        return (checkIntValue(start, minimal, maximal, true) &&
            checkIntValue(increment, minimal, maximal, false));
    }
    else {
        return checkIntValue(increment, minimal, maximal, true);
    }
}
function checkListField(value, minimal, maximal) {
    var st = value.split(",");
    var values = new Array(st.length);
    for (var j = 0; j < st.length; j++) {
        values[j] = st[j];
    }
    var previousValue = -1;
    for (var i = 0; i < values.length; i++) {
        var currentValue = values[i];
        if (!checkIntValue(currentValue, minimal, maximal, true)) {
            return false;
        }
        try {
            var val = parseInt(currentValue, 10);
            if (val <= previousValue) {
                return false;
            }
            else {
                previousValue = val;
            }
        }
        catch (e) { }
    }
    return true;
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Moment = __webpack_require__(1);
var _ = __webpack_require__(6);
var I18N_1 = __webpack_require__(0);
var cronExpValidator_1 = __webpack_require__(2);
var moment = __webpack_require__(1);
function isStrNum(str) {
    return !Number.isNaN(Number(str));
}
exports.isStrNum = isStrNum;
var PeriodType;
(function (PeriodType) {
    PeriodType["day"] = "day";
    PeriodType["week"] = "week";
    PeriodType["month"] = "month";
    PeriodType["hour"] = "hour";
    PeriodType["minute"] = "minute";
})(PeriodType = exports.PeriodType || (exports.PeriodType = {}));
// 默认时间格式化形式
exports.DEFAULT_FORMAT = "YYYY-MM-DD HH:mm:ss";
exports.getPeriodItems = function (lang, timeOptions) {
    return timeOptions
        .filter(function (item) { return Object.values(PeriodType).includes(item); })
        .map(function (item) {
        var I18N = I18N_1.getI18N(lang);
        var TranslateMap = I18N["translateMap"];
        return {
            text: TranslateMap[item],
            value: item
        };
    });
};
exports.getHourItems = function (lang, beginTime, endTime) {
    if (beginTime === void 0) { beginTime = 0; }
    if (endTime === void 0) { endTime = 24; }
    var hourUnit = I18N_1.getI18N(lang).hourUnit;
    return I18N_1.getArr(endTime - beginTime + 1, beginTime).slice().map(function (num) { return ({
        text: "" + num + hourUnit,
        value: String(num)
    }); });
};
exports.getDayItems = function (lang) {
    var dayItemsList = I18N_1.getI18N(lang).dayItemsList;
    return dayItemsList.map(function (num) {
        return {
            text: "" + num,
            value: String(num.replace(/[^0-9]/gi, ""))
        };
    });
};
exports.getWeekItems = function (lang) {
    var I18N = I18N_1.getI18N(lang);
    var weekItemsList = I18N["weekItemsList"];
    return weekItemsList.map(function (day, dayIndex) {
        return {
            text: day,
            value: dayIndex + 1 + ""
        };
    });
};
exports.getSteoHourItems = I18N_1.getArr(12, 1).map(function (num) {
    return {
        text: num + "",
        value: num + ""
    };
});
exports.getStepMinuteItems = [
    5,
    10,
    15,
    20,
    25,
    30,
    35,
    40,
    45,
    50,
    55
].map(function (num) {
    var str = String(num + 100).slice(1);
    return {
        text: str,
        value: str
    };
});
/** 计算对应多少分钟 */
exports.getMins = function (time) {
    var seconds = Moment(time).minute() + Moment(time).hour() * 60;
    return seconds;
};
var Cron = /** @class */ (function () {
    function Cron() {
    }
    Cron.prototype.init = function (cron) {
        var _this = this;
        _.forEach(cron, function (value, key) {
            if (value !== "periodType") {
                _this[key] = value;
            }
        });
    };
    Cron.getCronFromPeriodType = function (periodType) {
        if (periodType === PeriodType.day) {
            return new DayCron({});
        }
        else if (periodType === PeriodType.week) {
            return new WeekCron({});
        }
        else if (periodType === PeriodType.month) {
            return new MonthCron({});
        }
        else if (periodType === PeriodType.hour) {
            return new HourCron({});
        }
        else if (periodType === PeriodType.minute) {
            return new MinuteCron({});
        }
        else if (periodType === PeriodType.hour) {
            return new HourCron({});
        }
    };
    Cron.getCronFromExp = function (cronExp) {
        if (!cronExp) {
            return new DayCron({});
        }
        // 验证cronExp正确性
        if (!cronExpValidator_1.cronValidate(cronExp)) {
            return new DayCron({});
        }
        var _a = cronExp.split(" "), second = _a[0], _b = _a[1], minute = _b === void 0 ? "" : _b, _c = _a[2], hour = _c === void 0 ? "" : _c, day = _a[3], month = _a[4], week = _a[5];
        if (day === "*" &&
            !minute.includes("/") &&
            !hour.includes(",") &&
            !hour.includes("/")) {
            return new DayCron({
                time: Moment(hour + ":" + minute, "HH:mm"),
                isSchedule: hour !== "0" || minute !== "0"
            });
        }
        else if (day === "?") {
            return new WeekCron({
                time: Moment(hour + ":" + minute, "HH:mm"),
                weeks: week.split(",")
            });
        }
        else if (day !== "*" && isStrNum(hour)) {
            // 每月多少号
            return new MonthCron({
                days: day.split(","),
                time: Moment(hour + ":" + minute, "HH:mm")
            });
        }
        else if (minute.includes("/")) {
            var _d = minute.split("/"), beginMinute = _d[0], stepMinute = _d[1];
            var _e = hour.split("-"), beginHour = _e[0], endHour = _e[1];
            return new MinuteCron({
                beginTime: Moment(beginHour + ":" + beginMinute, "HH:mm"),
                endTime: Moment(endHour + ":00", "HH:mm"),
                stepMinute: stepMinute
            });
        }
        else {
            if (hour.includes(",")) {
                // 时间点
                return new HourCron({
                    hours: hour.split(","),
                    hasInterval: false
                });
            }
            else if (hour.includes("/")) {
                // 时间段
                var _f = hour.split("/"), duration = _f[0], stepHour = _f[1];
                var _g = hour.split("-"), beginHour = _g[0], endHour = _g[1];
                return new HourCron({
                    beginTime: Moment(beginHour + ":" + minute, "HH:mm"),
                    endTime: Moment(endHour + ":00", "HH:mm"),
                    stepHour: stepHour,
                    hasInterval: true // 有时间段，默认为true
                });
            }
            else {
                return new HourCron({ hours: [] });
            }
        }
    };
    return Cron;
}());
exports.Cron = Cron;
var DayCron = /** @class */ (function (_super) {
    __extends(DayCron, _super);
    function DayCron(cron) {
        var _this = _super.call(this) || this;
        _this.periodType = PeriodType.day;
        _this.time = Moment("00:00", "HH:mm");
        _this.isSchedule = false;
        _this.init(cron);
        return _this;
    }
    DayCron.prototype.changeIsSchedule = function (isSchedule) {
        if (this.isSchedule && !isSchedule) {
            this.time = Moment("00:00", "HH:mm");
        }
        this.isSchedule = isSchedule;
    };
    /** 产生预测时间-Day */
    DayCron.prototype.getPredictedTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var time = this.time;
        var now = Moment();
        // isBefore表示当前时间之前是否是设置时间之前
        // 若之前，则直接从第二天计算开始，否则从当天时间开始
        var isBefore = now.isBefore(time);
        var predictedTimes = I18N_1.getArr(times).map(function (current, index) {
            return "" + Moment(time)
                .add(isBefore ? index : index + 1, "days")
                .format(format);
        });
        return predictedTimes;
    };
    DayCron.prototype.format = function () {
        var time = this.time;
        return "0 " + time.minutes() + " " + time.hours() + " * * ?";
    };
    return DayCron;
}(Cron));
exports.DayCron = DayCron;
var MonthCron = /** @class */ (function (_super) {
    __extends(MonthCron, _super);
    function MonthCron(cron) {
        var _this = _super.call(this) || this;
        _this.periodType = PeriodType.month;
        _this.days = [];
        _this.time = Moment("00:00", "HH:mm");
        _this.init(cron);
        return _this;
    }
    MonthCron.prototype.format = function () {
        var _a = this, days = _a.days, time = _a.time;
        return "0 " + time.minutes() + " " + time.hours() + " " + (days.length > 0 ? days.join(",") : "*") + " * ?";
    };
    // 计算预测时间
    MonthCron.prototype.generatePredicteTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, days = _a.days, time = _a.time;
        var sortedDays = days.sort(function (a, b) { return +a - +b; });
        var now = Moment();
        var currentDay = +Moment().format("DD");
        var sortedIndex = _.sortedIndex(sortedDays, currentDay);
        var predictedTimes = _.sortedUniq(sortedDays.slice(sortedIndex)).concat(_.sortedUniq(sortedDays.slice(0, sortedIndex))).slice(0, times)
            .map(function (selectedDay) {
            var diff = +selectedDay - currentDay;
            // 为当天时，则比较具体的时间
            if (diff === 0) {
                var isBefore = now.isBefore(time);
                return Moment(time)
                    .add(isBefore ? 0 : 1, "months")
                    .format(format);
            }
            else {
                return Moment(time)
                    .add(diff >= 0 ? 0 : 1, "months")
                    .add("" + diff, "days")
                    .format(format);
            }
        })
            .sort(function (a, b) {
            return +Moment(a).format("YYYYMMDD") - +Moment(b).format("YYYYMMDD");
        });
        return predictedTimes;
    };
    /** 产生预测时间-Month */
    MonthCron.prototype.getPredictedTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, days = _a.days, time = _a.time;
        var predictedTimes = [];
        if (days && days.length > 0) {
            if (days.length > times) {
                predictedTimes = this.generatePredicteTimes(times, format);
            }
            else {
                predictedTimes = this.generatePredicteTimes(times, format);
                var list_1 = predictedTimes.slice();
                // 每一个月的XX号都执行
                I18N_1.getArr(times - days.length).forEach(function (item, index) {
                    list_1.forEach(function (predictedTime) {
                        if (predictedTimes.length < times) {
                            predictedTimes.push(Moment(predictedTime)
                                .add(index + 1, "months")
                                .format(format));
                        }
                    });
                });
            }
        }
        return predictedTimes;
    };
    return MonthCron;
}(Cron));
var WeekCron = /** @class */ (function (_super) {
    __extends(WeekCron, _super);
    function WeekCron(cron) {
        var _this = _super.call(this) || this;
        _this.periodType = PeriodType.week;
        _this.weeks = [];
        _this.time = Moment("00:00", "HH:mm");
        _this.init(cron);
        return _this;
    }
    WeekCron.prototype.format = function () {
        var _a = this, weeks = _a.weeks, time = _a.time;
        return "0 " + time.minutes() + " " + time.hours() + " ? * " + (weeks.length > 0 ? weeks.join(",") : "*");
    };
    WeekCron.prototype.generatePredictedTime = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, weeks = _a.weeks, time = _a.time;
        var curretWeek = +Moment().format("E") === 7 ? 0 : +Moment().format("E");
        // 找到若插入sortedDays中的索引
        var sortedIndex = _.sortedIndex(weeks, +curretWeek);
        var predictedTimes = _.sortedUniq(weeks.slice(sortedIndex)).concat(_.sortedUniq(weeks.slice(0, sortedIndex))).slice(0, times)
            .map(function (child, index) {
            // child为1时表示为周日
            var diff = child === 1 ? 7 - curretWeek : child - curretWeek - 1;
            if (diff === 0) {
                var isBefore = Moment().isBefore(time);
                return Moment(time)
                    .add(isBefore ? 0 : 1, "weeks")
                    .format(format);
            }
            else {
                return Moment(time)
                    .add(diff >= 0 ? 0 : 1, "weeks")
                    .add("" + Math.abs(diff), "days")
                    .format(format);
            }
        })
            .sort(function (a, b) {
            return +Moment(a).format("YYYYMMDD") - +Moment(b).format("YYYYMMDD");
        });
        return predictedTimes;
    };
    /** 产生预测时间-Week */
    WeekCron.prototype.getPredictedTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, weeks = _a.weeks, time = _a.time;
        var predictedTimes = [];
        if (weeks && weeks.length > 0) {
            if (weeks.length >= times) {
                predictedTimes = this.generatePredictedTime(times, format);
            }
            else {
                predictedTimes = this.generatePredictedTime(times, format);
                var list_2 = predictedTimes.slice();
                I18N_1.getArr(times - weeks.length).forEach(function (item, index) {
                    list_2.forEach(function (predictedTime) {
                        if (predictedTimes.length < times) {
                            predictedTimes.push(Moment(predictedTime)
                                .add((index + 1) * 7, "days")
                                .format(format));
                        }
                    });
                });
            }
        }
        return predictedTimes;
    };
    return WeekCron;
}(Cron));
var HourCron = /** @class */ (function (_super) {
    __extends(HourCron, _super);
    function HourCron(cron) {
        var _this = _super.call(this) || this;
        _this.periodType = PeriodType.hour;
        /** 是否使用时间段 */
        _this.hasInterval = false;
        _this.hours = [];
        _this.beginTime = Moment("00:00", "HH:mm");
        // endTime minutes only 59
        _this.endTime = Moment("23:59", "HH:mm");
        _this.stepHour = "1";
        _this.init(cron);
        return _this;
    }
    HourCron.prototype.format = function () {
        var _a = this, hasInterval = _a.hasInterval, beginTime = _a.beginTime, endTime = _a.endTime, hours = _a.hours, stepHour = _a.stepHour;
        if (hasInterval) {
            return "0 " + beginTime.minutes() + " " + beginTime.hours() + "-" + endTime.hours() + "/" + stepHour + " * * ?";
        }
        else {
            return "0 0 " + (hours.length > 0 ? hours.join(",") : "*") + " * * ?";
        }
    };
    /** 产生预测时间-Hour */
    HourCron.prototype.getPredictedTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, hasInterval = _a.hasInterval, beginTime = _a.beginTime, endTime = _a.endTime, hours = _a.hours, stepHour = _a.stepHour;
        var predictedTimes = [];
        if (hasInterval) {
            var minDiff = exports.getMins(endTime) - exports.getMins(beginTime);
            if (minDiff <= +stepHour * 60) {
                predictedTimes = [Moment(beginTime).format(format)];
            }
            else {
                // 结束时间减去开始时间/间隔，然后slice(0,times)
                var count = minDiff / (+stepHour * 60);
                predictedTimes = I18N_1.getArr(count)
                    .slice(0, times)
                    .map(function (item, index) {
                    return "" + Moment(beginTime)
                        .add(+stepHour * index, "hours")
                        .format(format);
                });
            }
        }
        else {
            predictedTimes = hours
                .slice(0, times)
                .map(function (hour) { return "" + moment(hour, "HH").format(format); });
        }
        return predictedTimes;
    };
    return HourCron;
}(Cron));
var MinuteCron = /** @class */ (function (_super) {
    __extends(MinuteCron, _super);
    function MinuteCron(cron) {
        var _this = _super.call(this) || this;
        _this.periodType = PeriodType.minute;
        _this.beginTime = Moment("00:00", "HH:mm");
        _this.endTime = Moment("23:59", "HH:mm");
        _this.stepMinute = "05";
        _this.init(cron);
        return _this;
    }
    /** 产生预测时间-Min */
    MinuteCron.prototype.getPredictedTimes = function (times, format) {
        if (times === void 0) { times = 5; }
        if (format === void 0) { format = exports.DEFAULT_FORMAT; }
        var _a = this, beginTime = _a.beginTime, endTime = _a.endTime, stepMinute = _a.stepMinute;
        var predictedTimes = [];
        var timeDiff = exports.getMins(endTime) - exports.getMins(beginTime);
        if (timeDiff <= +stepMinute) {
            // 判断开始结束时间是否大于间隔时间，否则返回开始时间
            predictedTimes = [Moment(beginTime).format(format)];
        }
        else {
            // 结束时间减去开始时间/间隔，然后slice(0,times)
            var count = timeDiff / +stepMinute;
            predictedTimes = I18N_1.getArr(count)
                .slice(0, times)
                .map(function (item, index) {
                return "" + Moment(beginTime)
                    .add(+stepMinute * index, "minutes")
                    .format(format);
            });
        }
        return predictedTimes;
    };
    MinuteCron.prototype.format = function () {
        var _a = this, beginTime = _a.beginTime, endTime = _a.endTime, stepMinute = _a.stepMinute;
        return "0 */" + stepMinute + " " + beginTime.hours() + "-" + endTime.hours() + " * * ?";
    };
    return MinuteCron;
}(Cron));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(7);
var antd_1 = __webpack_require__(5);
var Moment = __webpack_require__(1);
var I18N_1 = __webpack_require__(0);
var cronUtils_1 = __webpack_require__(3);
var cronExpValidator_1 = __webpack_require__(2);
exports.cronValidate = cronExpValidator_1.cronValidate;
var I18N_2 = __webpack_require__(0);
var Option = antd_1.Select.Option;
var RadioGroup = antd_1.Radio.Group;
function getOptions(items) {
    return items.map(function (item) {
        return (React.createElement(Option, { key: item.value, value: item.value }, item.text));
    });
}
__export(__webpack_require__(3));
var OneCronProps = /** @class */ (function () {
    function OneCronProps() {
        this.onChange = function (exp) { };
        this.lang = I18N_2.LangEnum.en_US;
        this.showCheckbox = false;
        this.disabled = false;
        this.showRecentTime = false;
        /** 可配置时间粒度 */
        this.options = Object.values(cronUtils_1.PeriodType);
        /** 开始时间，用于小时选择 */
        this.beginTime = 0;
        /** 结束时间，用于小时选择 */
        this.endTime = 24;
        /** 是否支持多选 */
        this.multiple = true;
    }
    return OneCronProps;
}());
exports.OneCronProps = OneCronProps;
var OneCron = /** @class */ (function (_super) {
    __extends(OneCron, _super);
    function OneCron(props) {
        var _this = _super.call(this, props) || this;
        _this.disabledHours = function (sTime, eTime, type) {
            if (type === void 0) { type = "end"; }
            var _a = _this.props, beginTime = _a.beginTime, endTime = _a.endTime;
            if (type === "end") {
                var newTime = Math.min(eTime, endTime);
                return I18N_1.getArr(beginTime, 0).concat(I18N_1.getArr(24 - newTime, newTime === 0 ? 1 : newTime));
            }
            else {
                var newtime = Math.max(sTime, beginTime);
                return I18N_1.getArr(newtime + 1, 0).concat(I18N_1.getArr(24 - endTime, endTime === 0 ? 1 : endTime));
            }
        };
        _this.handleStartOpenChange = function (open) {
            if (!open) {
                _this.setState({ endOpen: true });
            }
        };
        _this.handleEndOpenChange = function (open) {
            _this.setState({ endOpen: open });
        };
        var cron = cronUtils_1.Cron.getCronFromExp(props.cronExpression);
        _this.state = {
            cron: cron,
            cronType: cron.periodType,
            isEmpty: !props.cronExpression,
            endOpen: false,
            timeList: [],
        };
        return _this;
    }
    OneCron.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.cronExpression !== this.props.cronExpression) {
            if (this.state.isEmpty) {
                var newCron = cronUtils_1.Cron.getCronFromExp(nextProps.cronExpression);
                var cronType = newCron.periodType;
                this.setState({
                    cron: newCron,
                    cronType: cronType,
                    isEmpty: false,
                    timeList: newCron.getPredictedTimes()
                });
            }
        }
    };
    OneCron.prototype.handleChangePeriodType = function (periodType) {
        var _this = this;
        var newCron = cronUtils_1.Cron.getCronFromPeriodType(periodType);
        this.setState({
            cron: newCron,
            cronType: periodType,
            timeList: newCron.getPredictedTimes()
        }, function () {
            _this.props.onChange(_this.state.cron);
        });
    };
    OneCron.prototype.triggerChange = function () {
        var timeList = this.state.cron.getPredictedTimes();
        this.setState({
            timeList: timeList
        });
        this.props.onChange(this.state.cron);
        this.forceUpdate();
    };
    OneCron.prototype.renderDetail = function () {
        var _this = this;
        var _a = this.state, cron = _a.cron, endOpen = _a.endOpen;
        var _b = this.props, lang = _b.lang, showCheckbox = _b.showCheckbox, disabled = _b.disabled, _c = _b.beginTime, beginTime = _c === void 0 ? 0 : _c, _d = _b.endTime, endTime = _d === void 0 ? 24 : _d, multiple = _b.multiple;
        var disabledHours = function () { return I18N_1.getArr(beginTime, 0).concat(I18N_1.getArr(24 - endTime, endTime === 0 ? 1 : endTime)); };
        var I18N = I18N_2.getI18N(lang);
        var getCommonProps = function (cronBO, key, cronType) {
            // 数据订正
            if (cronType === cronUtils_1.PeriodType.minute) {
                if (key === "endTime") {
                    cronBO[key] = Moment(cronBO[key], "HH:mm").minute(59);
                }
                else if (key === "beginTime") {
                    cronBO[key] = Moment(cronBO[key], "HH:mm").minute(0);
                }
            }
            else if (cronType === cronUtils_1.PeriodType.hour) {
                if (key === "endTime") {
                    cronBO[key] = Moment(cronBO[key], "HH:mm").minute(59);
                }
            }
            return {
                value: cronBO[key],
                onChange: function (value) {
                    cronBO[key] = value;
                    // 数据订正
                    if (cronType === cronUtils_1.PeriodType.minute) {
                        if (key === "endTime") {
                            cronBO[key] = Moment(cronBO[key], "HH:mm").minute(59);
                        }
                        else if (key === "beginTime") {
                            cronBO[key] = Moment(cronBO[key], "HH:mm").minute(0);
                        }
                    }
                    else if (cronType === cronUtils_1.PeriodType.hour) {
                        if (key === "endTime") {
                            cronBO[key] = Moment(cronBO[key], "HH:mm").minute(59);
                        }
                    }
                    _this.triggerChange();
                }
            };
        };
        switch (cron.periodType) {
            case cronUtils_1.PeriodType.day: {
                if (showCheckbox && !cron.isSchedule) {
                    return null;
                }
                if (!showCheckbox) {
                    // showCheckbox关闭，则说明默认自动调度任务
                    cron.changeIsSchedule(!showCheckbox);
                }
                return (React.createElement(antd_1.TimePicker, __assign({ disabledHours: disabledHours, format: 'HH:mm' }, getCommonProps(cron, "time"), { disabled: disabled })));
            }
            case cronUtils_1.PeriodType.week: {
                return (React.createElement("span", null,
                    React.createElement(antd_1.Select, __assign({ disabled: disabled, mode: multiple ? 'tags' : 'default', style: { width: 200 } }, getCommonProps(cron, "weeks"), { onChange: function (value) {
                            var weeks = multiple ? value.sort(function (a, b) { return +a - +b; }) : [].concat(value);
                            cron.weeks = weeks;
                            _this.triggerChange();
                        }, value: cron.weeks.filter(function (item) { return item !== '*'; }) }), getOptions(cronUtils_1.getWeekItems(lang))),
                    React.createElement(antd_1.TimePicker, __assign({ disabledHours: disabledHours, format: 'HH:mm' }, getCommonProps(cron, "time")))));
            }
            case cronUtils_1.PeriodType.month: {
                return (React.createElement("span", null,
                    React.createElement(antd_1.Select, __assign({ disabled: disabled, mode: multiple ? 'tags' : 'default', style: { width: 200 } }, getCommonProps(cron, "days"), { onChange: function (value) {
                            var days = multiple ? value.sort(function (a, b) { return +a - +b; }) : [].concat(value);
                            cron.days = days;
                            _this.triggerChange();
                        }, value: cron.days }), getOptions(cronUtils_1.getDayItems(lang))),
                    React.createElement(antd_1.TimePicker, __assign({ disabledHours: disabledHours, format: 'HH:mm' }, getCommonProps(cron, "time")))));
            }
            case cronUtils_1.PeriodType.minute: {
                var startTime = +Moment(getCommonProps(cron, "beginTime").value).format("HH");
                var endTime_1 = +Moment(getCommonProps(cron, "endTime").value).format("HH");
                return (React.createElement("span", null,
                    React.createElement("span", { className: 'form-item' },
                        React.createElement("span", { className: 'form-item-title' }, I18N.start),
                        React.createElement(antd_1.TimePicker, __assign({ disabled: disabled, disabledHours: this.disabledHours.bind(this, startTime, endTime_1, "end"), disabledMinutes: function () { return I18N_1.getArr(59, 1); }, format: 'HH:mm', onOpenChange: this.handleStartOpenChange }, getCommonProps(cron, "beginTime", cronUtils_1.PeriodType.minute)))),
                    React.createElement("span", { className: 'form-item' },
                        React.createElement("span", { className: 'form-item-title' }, I18N.step),
                        React.createElement(antd_1.Select, __assign({ disabled: disabled, style: { width: 100 } }, getCommonProps(cron, "stepMinute")), getOptions(cronUtils_1.getStepMinuteItems)),
                        React.createElement("span", { style: { marginRight: 20 } }, I18N.stepMinuteUnit)),
                    React.createElement("span", { className: 'form-item' },
                        React.createElement("span", { className: 'form-item-title' }, I18N.end),
                        React.createElement(antd_1.TimePicker, __assign({ disabled: disabled, format: 'HH:mm' }, getCommonProps(cron, "endTime", cronUtils_1.PeriodType.minute), { disabledHours: this.disabledHours.bind(this, startTime, endTime_1, "start"), disabledMinutes: function () { return I18N_1.getArr(59, 0); }, open: endOpen, onOpenChange: this.handleEndOpenChange })))));
            }
            case cronUtils_1.PeriodType.hour: {
                var startTime = +Moment(getCommonProps(cron, "beginTime").value).format("HH");
                var endTime_2 = +Moment(getCommonProps(cron, "endTime").value).format("HH");
                return (React.createElement("span", null,
                    React.createElement(RadioGroup, { disabled: disabled, value: cron.hasInterval ? "step" : "point", onChange: function (e) {
                            cron.hasInterval = e.target.value === "step";
                            _this.triggerChange();
                        } },
                        React.createElement(antd_1.Radio, { value: 'step' }, I18N.period),
                        React.createElement(antd_1.Radio, { value: 'point' }, I18N.point)),
                    cron.hasInterval ? (React.createElement("span", null,
                        React.createElement("span", { className: 'form-item' },
                            React.createElement("span", { className: 'form-item-title' }, I18N.start),
                            React.createElement(antd_1.TimePicker, __assign({ disabled: disabled, disabledHours: this.disabledHours.bind(this, startTime, endTime_2, "end"), onOpenChange: this.handleStartOpenChange, format: 'HH:mm' }, getCommonProps(cron, "beginTime", cronUtils_1.PeriodType.hour)))),
                        React.createElement("span", { className: 'form-item' },
                            React.createElement("span", { className: 'form-item-title' }, I18N.step),
                            React.createElement(antd_1.Select, __assign({ disabled: disabled, style: { width: 100 } }, getCommonProps(cron, "stepHour")), getOptions(cronUtils_1.getSteoHourItems)),
                            React.createElement("span", { style: { marginRight: 20 } }, I18N.stepHourUnit)),
                        React.createElement("span", { className: 'form-item' },
                            React.createElement("span", { className: 'form-item-title' }, I18N.end),
                            React.createElement(antd_1.TimePicker, __assign({ disabled: disabled, format: 'HH:mm', disabledHours: this.disabledHours.bind(this, startTime, endTime_2, "start"), disabledMinutes: function () { return I18N_1.getArr(59, 0); }, open: endOpen, onOpenChange: this.handleEndOpenChange }, getCommonProps(cron, "endTime", cronUtils_1.PeriodType.hour)))))) : (React.createElement(antd_1.Select, { mode: multiple ? 'tags' : 'default', disabled: disabled, style: { width: 200 }, onChange: function (value) {
                            var hours = multiple ? value.sort(function (a, b) { return +a - +b; }) : [].concat(value);
                            cron.hours = hours;
                            _this.triggerChange();
                        }, value: cron.hours }, getOptions(cronUtils_1.getHourItems(lang, beginTime, endTime_2))))));
            }
            default: {
                return null;
            }
        }
    };
    OneCron.prototype.render = function () {
        var _this = this;
        var _a = this.props, cronExpression = _a.cronExpression, onChange = _a.onChange, lang = _a.lang, showCheckbox = _a.showCheckbox, disabled = _a.disabled, showRecentTime = _a.showRecentTime, options = _a.options;
        var I18N = I18N_2.getI18N(lang);
        var cron = this.state.cron;
        var typeCx = cron.periodType;
        var isValidate = cronExpValidator_1.cronValidate(cronExpression);
        return (React.createElement("span", { className: "schedule-period " + typeCx },
            React.createElement(antd_1.Select, { value: cron.periodType, onChange: this.handleChangePeriodType.bind(this), disabled: disabled }, getOptions(cronUtils_1.getPeriodItems(lang, options))),
            !!showCheckbox && (React.createElement(antd_1.Checkbox, { onChange: function (e) {
                    cron.changeIsSchedule(e.target.checked);
                    _this.triggerChange();
                }, disabled: cron.periodType !== cronUtils_1.PeriodType.day || disabled, checked: cron.periodType !== cronUtils_1.PeriodType.day ? true : cron.isSchedule },
                React.createElement("span", { className: 'timing' }, I18N.timing))),
            this.renderDetail(),
            !isValidate && (React.createElement("span", { className: 'errorCronExp' }, I18N.errorCronExp)),
            React.createElement("span", { className: 'exp' },
                React.createElement("span", { className: 'exp-title' }, I18N.expTitle),
                React.createElement("span", { className: 'exp-cron' }, cronExpression)),
            showRecentTime && (React.createElement("span", { className: 'recent' },
                React.createElement("span", { className: 'recent-title' }, I18N.recentTimes),
                React.createElement("ul", null, this.state.timeList.map(function (time, index) { return (React.createElement("li", { key: index }, time)); }))))));
    };
    OneCron.defaultProps = new OneCronProps();
    return OneCron;
}(React.Component));
exports.default = OneCron;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ })
/******/ ]);
});