import * as Moment from "moment";
import { LangEnum } from "./I18N";
export declare function isStrNum(str: string): boolean;
export declare enum PeriodType {
    day = "day",
    week = "week",
    month = "month",
    hour = "hour",
    minute = "minute"
}
export declare const DEFAULT_FORMAT = "YYYY-MM-DD HH:mm:ss";
export declare const getPeriodItems: (lang: LangEnum, timeOptions: PeriodType[]) => {
    text: string;
    value: PeriodType;
}[];
export declare const getHourItems: (lang: LangEnum, beginTime?: number, endTime?: number) => {
    text: string;
    value: string;
}[];
export declare const getDayItems: (lang: LangEnum) => {
    text: string;
    value: string;
}[];
export declare const getWeekItems: (lang: LangEnum) => {
    text: string;
    value: string;
}[];
export declare const getSteoHourItems: {
    text: string;
    value: string;
}[];
export declare const getStepMinuteItems: {
    text: string;
    value: string;
}[];
/** 计算对应多少分钟 */
export declare const getMins: (time: Moment.Moment) => number;
export declare type AllCron = DayCron | WeekCron | MonthCron | HourCron | MinuteCron;
export declare class Cron {
    periodType: PeriodType;
    init(cron: any): void;
    static getCronFromPeriodType(periodType: PeriodType): AllCron;
    static getCronFromExp(cronExp: string): AllCron;
}
export declare class DayCron extends Cron {
    readonly periodType: PeriodType;
    time: Moment.Moment;
    isSchedule: boolean;
    changeIsSchedule(isSchedule: boolean): void;
    /** 产生预测时间-Day */
    getPredictedTimes(times?: number, format?: string): string[];
    format(): string;
    constructor(cron: Partial<DayCron>);
}
declare class MonthCron extends Cron {
    readonly periodType: PeriodType;
    days: string[];
    time: Moment.Moment;
    format(): string;
    generatePredicteTimes(times?: number, format?: string): string[];
    /** 产生预测时间-Month */
    getPredictedTimes(times?: number, format?: string): string[];
    constructor(cron: Partial<MonthCron>);
}
declare class WeekCron extends Cron {
    readonly periodType: PeriodType;
    weeks: string[];
    time: Moment.Moment;
    format(): string;
    generatePredictedTime(times?: number, format?: string): string[];
    /** 产生预测时间-Week */
    getPredictedTimes(times?: number, format?: string): string[];
    constructor(cron: Partial<WeekCron>);
}
declare class HourCron extends Cron {
    readonly periodType: PeriodType;
    /** 是否使用时间段 */
    hasInterval: boolean;
    hours?: string[];
    beginTime?: Moment.Moment;
    endTime?: Moment.Moment;
    stepHour?: string;
    format(): string;
    /** 产生预测时间-Hour */
    getPredictedTimes(times?: number, format?: string): string[];
    constructor(cron: Partial<HourCron>);
}
declare class MinuteCron extends Cron {
    readonly periodType: PeriodType;
    beginTime?: Moment.Moment;
    endTime?: Moment.Moment;
    stepMinute?: string;
    /** 产生预测时间-Min */
    getPredictedTimes(times?: number, format?: string): string[];
    format(): string;
    constructor(cron: Partial<MinuteCron>);
}
export {};
