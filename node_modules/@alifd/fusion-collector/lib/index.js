'use strict';

/**
* Created at 16/7/8.
* @Author Ling.
* @Email i@zeroling.com
*/

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _gracefulFs = require('graceful-fs');

var _gracefulFs2 = _interopRequireDefault(_gracefulFs);

var _log = require('./retcodelog/src/log.js');

var _log2 = _interopRequireDefault(_log);

var _utils = require('./utils');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('next:collect');exports.default = {
    collectDetail: collectDetail
};

/**
* 分析数据
*/

function collect(options, pkjson) {
    // debug('options', options);
    options = options || {};
    var rootDir = void 0;

    if (Object.prototype.toString.call(options) == '[object String]') {
        rootDir = options;
        options = {};
    }

    rootDir = rootDir || options.rootDir;

    if (!rootDir) {
        console.error('缺少项目路径，请添加 rootDir 参数');
        return;
    }

    options.rootDir = rootDir;
    var basicPackage = pkjson || '@alifd/next';
    var kit = options.kit || 'fusion-collector';

    // 获取基础信息
    var pkg = {};
    try {
        var packageFilePath = _path2.default.join(rootDir, 'package.json');
        pkg = JSON.parse(_gracefulFs2.default.readFileSync(packageFilePath, 'utf-8'));
    } catch (err) {
        debug('读取 package.json 文件错误: ', err.message);
    }

    var gitConfig = (0, _utils.getGitConfig)(rootDir);

    // debug('git config', gitConfig);

    var repoName = void 0,
        gitUrl = void 0,
        author = void 0,
        isDefBuild = 0;
    if (process.env.BUILD_GIT_GROUP && process.env.BUILD_GIT_PROJECT) {
        author = process.env.BUILD_USER;
        repoName = process.env.BUILD_GIT_GROUP + '/' + process.env.BUILD_GIT_PROJECT;
        gitUrl = 'git@git@gitlab.alibaba-inc.com:' + repoName + '.git';
        isDefBuild = 1;
    }

    var basicPackageVersion = void 0,
        kitVersion = void 0;

    try {
        if ('kitVersion' in options) {
            kitVersion = options.kitVersion;
        } else {
            var kitPkgjsonPath = _path2.default.join(rootDir, 'node_modules', kit, 'package.json');
            if (_gracefulFs2.default.existsSync(kitPkgjsonPath)) {
                var kitPkgjson = _gracefulFs2.default.readFileSync(kitPkgjsonPath, 'utf-8');
                var kitPkg = JSON.parse(kitPkgjson);
                kitVersion = kitPkg && kitPkg.version;
            } else {
                kitVersion = pkg['dependencies'][kit] || '';
            }
        }
    } catch (error) {
        console.error('kit version: ', error);
    }

    try {
        var basicPkgjsonPath = _path2.default.join(rootDir, 'node_modules', basicPackage, 'package.json');
        if (_gracefulFs2.default.existsSync(basicPkgjsonPath)) {
            var basicPkgjson = _gracefulFs2.default.readFileSync(basicPkgjsonPath, 'utf-8');
            var basicPkg = JSON.parse(basicPkgjson);
            basicPackageVersion = basicPkg && basicPkg.version;
        } else {
            basicPackageVersion = pkg['dependencies'][basicPackage] || '';
        }
    } catch (error) {
        console.error('basic package version: ', error);
    }
    // debug('被统计的插件版本：', basicPackageVersion);
    // debug('统计工具的版本：', kitVersion);

    var result = {
        // 云构建读取出来的可能是 工号 也可能是 花名，云构建读取数据的优先级高于 git config
        author: author || gitConfig.userName,
        // 项目组名和仓库名
        repoName: repoName || gitConfig.repoName,
        // 仓库地址
        gitUrl: gitUrl || gitConfig.url,
        // 统计工具名称
        kit: kit,
        // 统计工具版本
        kitVersion: kitVersion,
        // 主体包名称
        basicPackage: basicPackage,
        // 主体包版本信息
        basicPackageVersion: basicPackageVersion,
        // 构建类型
        cmdType: options.cmdType || 'build',
        // package.json 信息
        pkg: pkg,
        // 是否是云构建
        isDefBuild: isDefBuild
    };

    return result;
}

/**
* 格式化数据收集
*/
function formatCollect(originInfo) {
    var gitUrl = originInfo.gitUrl,
        author = originInfo.author,
        repoName = originInfo.repoName,
        kit = originInfo.kit,
        basicPackage = originInfo.basicPackage,
        basicPackageVersion = originInfo.basicPackageVersion,
        cmdType = originInfo.cmdType,
        isDefBuild = originInfo.isDefBuild,
        kitVersion = originInfo.kitVersion;

    var pkg = originInfo.pkg || {};

    // const sshReg = /git@(.*):(.*)\.git/g;
    var httpReg = /(.*):\/\/(.*?)\/(.*)\.git/g;

    var sshGitUrl = httpReg.test(gitUrl) ? gitUrl.replace(httpReg, function (all, s1, s2, s3) {
        return 'git@' + s2 + '/' + s3 + '.git';
    }) : gitUrl;

    return {
        project_id: sshGitUrl,
        git_url: gitUrl,
        project_name: pkg.name,
        description: pkg.description,
        author: author,
        repo_name: repoName,
        kit_version: kitVersion,
        basic_package: basicPackage,
        basic_package_version: basicPackageVersion,
        kit: kit,
        cmd_type: cmdType,
        is_def_build: isDefBuild
    };
}

/**
* 分析并上报数据,recode使用get上报，数据量如果大的话需要拆分请求。
*/
function collectDetail(options) {
    var retCodeInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    try {
        var basePkg = options.basicPackage ? Array.isArray(options.basicPackage) ? options.basicPackage : [options.basicPackage] : ['@alifd/next', '@alife/next', '@icedesign/base'];

        basePkg.forEach(function (pkjson) {

            var originInfo = collect(options, pkjson);
            var uploadInfo = formatCollect(originInfo);

            debug('上报数据', uploadInfo);

            _log2.default.setConfig({
                sample: retCodeInfo.sample || 1,
                spmId: retCodeInfo.spmId || 'fusion.next2'
            });

            var logMsg = '';
            if (!(uploadInfo.basic_package_version === '')) {

                (0, _keys2.default)(uploadInfo).forEach(function (key) {
                    logMsg += key + '=' + uploadInfo[key] + '&&';
                });
                // 可分析类数据
                _log2.default.log(logMsg, 1);

                return true;
            }
        });
    } catch (error) {
        console.log(error);
    }
}
module.exports = exports['default'];