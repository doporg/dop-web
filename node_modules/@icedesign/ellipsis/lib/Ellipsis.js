'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _balloon = _interopRequireDefault(require("@icedesign/base/lib/balloon"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./utils");

var Tooltip = _balloon.default.Tooltip;

var IceEllipsis =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(IceEllipsis, _Component);

  function IceEllipsis(props) {
    var _this;

    (0, _classCallCheck2.default)(this, IceEllipsis);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IceEllipsis).call(this, props));
    var isSupportLineClamp = true;
    var node = document.createElement('div');

    if ('WebkitLineClamp' in node.style) {
      node.style['WebkitLineClamp'] = 3;

      if (node.style['WebkitLineClamp'] != 3) {
        isSupportLineClamp = false;
      }
    } else {
      isSupportLineClamp = false;
    }

    _this.state = {
      isSupportLineClamp: isSupportLineClamp,
      wrapWidth: 'auto',
      fontSize: 16
    };
    return _this;
  }

  (0, _createClass2.default)(IceEllipsis, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var wrapDOM = _reactDom.default.findDOMNode(this).parentNode;

      var wrapWidth = (0, _utils.getWidthFromDOM)(wrapDOM); // 拿到父结构的 font-size 用于自动计算宽度

      var fontSize = parseInt(window.getComputedStyle(wrapDOM, null).getPropertyValue('font-size'));
      this.setState({
        wrapWidth: wrapWidth,
        fontSize: fontSize
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var content = null;
      var _this$props = this.props,
          lineLimit = _this$props.lineLimit,
          text = _this$props.text,
          others = (0, _objectWithoutProperties2.default)(_this$props, ["lineLimit", "text"]);
      var cls = (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, 'ice-ellipsis', true), (0, _defineProperty2.default)(_classnames, this.props.className, this.props.className), _classnames));
      var style = (0, _objectSpread3.default)({}, this.props.style);
      var _this$state = this.state,
          wrapWidth = _this$state.wrapWidth,
          isSupportLineClamp = _this$state.isSupportLineClamp,
          fontSize = _this$state.fontSize;

      if (lineLimit === 1) {
        content = _react.default.createElement("span", {
          className: cls,
          style: (0, _objectSpread3.default)({
            width: wrapWidth,
            textOverflow: 'ellipsis',
            display: 'inline-block',
            whiteSpace: 'nowrap',
            overflow: 'hidden'
          }, style)
        }, text);
      } else if (lineLimit > 1) {
        if (this.state.isSupportLineClamp) {
          var _objectSpread2;

          content = _react.default.createElement("span", {
            className: cls,
            style: (0, _objectSpread3.default)((_objectSpread2 = {
              width: wrapWidth,
              textOverflow: 'ellipsis',
              display: 'inline-block',
              overflow: 'hidden'
            }, (0, _defineProperty2.default)(_objectSpread2, "display", '-webkit-box'), (0, _defineProperty2.default)(_objectSpread2, "WebkitLineClamp", lineLimit), (0, _defineProperty2.default)(_objectSpread2, "WebkitBoxOrient", 'vertical'), _objectSpread2), style)
          }, text);
        } else {
          var lineCount = 10;

          if (wrapWidth !== 'auto') {
            lineCount = parseFloat(wrapWidth / fontSize, 10);
          }

          lineCount = Math.floor(lineCount);
          var textArr = getTextArr(text, lineCount, lineLimit);
          var textList = textArr.map(function (item, index) {
            // 最后一个超过一行长度的裁切一下加下省略号
            if (index == lineLimit - 1 && item.length === lineCount) {
              return _react.default.createElement("span", {
                key: index
              }, setEllipsis(item));
            }

            return _react.default.createElement("span", {
              key: index
            }, item);
          });
          content = _react.default.createElement("span", {
            className: cls,
            style: (0, _objectSpread3.default)({
              width: wrapWidth
            }, style)
          }, textList);
        }
      }

      if (this.props.showTooltip) {
        return _react.default.createElement(Tooltip, (0, _extends2.default)({
          trigger: content,
          align: "b",
          text: text
        }, this.props.tooltipProps));
      } else {
        return _react.default.createElement("span", {
          title: text
        }, content);
      }
    }
  }]);
  return IceEllipsis;
}(_react.Component);

exports.default = IceEllipsis;
IceEllipsis.displayName = 'IceEllipsis';
IceEllipsis.propTypes = {
  style: _propTypes.default.object,
  className: _propTypes.default.string,

  /**
   * 渲染几行文本
   */
  lineLimit: _propTypes.default.number,

  /**
   * 是否显示额外的 tool tip 展示全部内容
   */
  showTooltip: _propTypes.default.bool,

  /**
   * 实际文本内容
   */
  text: _propTypes.default.string,

  /**
   * 针对 tooltip 模式下，Tooltip 组件的自定义 props
   */
  tooltipProps: _propTypes.default.object
};
IceEllipsis.defaultProps = {
  className: '',
  lineLimit: 1,
  showTooltip: false,
  // 设置内容
  text: '',
  tooltipProps: {}
};

function getTextArr(text, lineTextLength, lineLimit) {
  var result = [];

  for (var i = 1; i <= Math.ceil(text.length / lineTextLength); i++) {
    var start = lineTextLength * (i - 1);
    var end = Math.min(i * lineTextLength, text.length);
    var currentStr = text.substring(start, end);
    result.push(currentStr);
  }

  if (result.length > lineLimit) {
    result.splice(lineLimit);
  }

  return result;
}

function setEllipsis(text) {
  var textArr = text.split('');
  textArr.splice(textArr.length - 1, 3, '...');
  return textArr.join('');
}