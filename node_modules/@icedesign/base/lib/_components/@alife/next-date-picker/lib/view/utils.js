'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nextMoment = require('../../../next-moment/lib/index.js');

var _nextMoment2 = _interopRequireDefault(_nextMoment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*eslint-disable no-useless-escape */
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}

function isString(str) {
    return typeof str === 'string';
}

function isISODate(str) {
    if (isString(str)) {
        var match = extendedIsoRegex.exec(str) || basicIsoRegex.exec(str);

        // 这里检测强制规范
        if (match && match.length && match[2] === 'T' && match[4] === 'Z') {
            return true;
        }
    }

    return false;
}

/**
 * 格式化日期值为目标格式的字符串
 * @param {Object} dateObject 日期对象
 * @param {String|Function} format 格式字符串或格式函数
 */
function formatDate(dateObject, format) {
    if (isFunction(format)) {
        return format(dateObject);
    }
    return (0, _nextMoment2['default'])(dateObject).format(format);
}

/**
 * 构造自定义 CalendarDate 对象
 * @param {Object} value 被 moment 格式化后的日期值 { _d, _isUTC, _isValid, _locale, ... }
 * @return {Object} 格式化后的 Calendar 日期对象
 */
function getCalendarDate(value) {
    if (!value.isValid()) {
        return {};
    }

    return {
        timestamp: value.valueOf(),
        year: value.year(),
        month: value.month(),
        date: value.date(),
        week: value.isoWeekday(),
        valueOf: function valueOf() {
            return value.valueOf();
        }
    };
}

var utils = {
    isFunction: isFunction,

    // mixin object props to target
    mixin: function mixin(target, object) {
        for (var key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                target[key] = object[key];
            }
        }
        return target;
    },
    filterObject: function filterObject(obj) {
        for (var key in obj) {
            if (obj[key] === undefined) {
                delete obj[key];
            }
        }
        return obj;
    },


    getCalendarDate: getCalendarDate,

    /**
     * 判断输入值是否是有效的 CalendarDate 对象
     * @param {Object} calendarDate  输入日期对象
     * @param {Function} disabledDateFn 判断日期是否是禁用日期的函数
     */
    isValidCalendarDate: function isValidCalendarDate(calendarDate, disabledDateFn) {
        if (isFunction(disabledDateFn)) {
            return !disabledDateFn(calendarDate);
        }
        return true;
    },


    /**
     * 获取模糊匹配和精确匹配日期的正则表达式
     * @param {Array|String} formater format 数组
     * @return {Object} { fuzzy, exact }
     */
    getStrRegExp: function getStrRegExp(formater) {
        var exactRegExp = [];
        var fuzzyRegExp = [];

        for (var i = 0; i < formater.length; i++) {
            if (/[a-zA-Z]/.test(formater[i])) {
                exactRegExp.push('[0-9]');
            } else {
                exactRegExp.push(formater[i]);

                if (fuzzyRegExp.indexOf(formater[i]) === -1) {
                    fuzzyRegExp.push(formater[i]);
                }
            }
        }

        return {
            fuzzy: new RegExp('^[0-9' + fuzzyRegExp.join('') + ']{0,' + exactRegExp.length + '}$'),
            exact: new RegExp('^' + exactRegExp.join('') + '$')
        };
    },
    getFormat: function getFormat(formater, format) {
        var hasTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (format) {
            return {
                dateFormat: hasTime ? 'YYYY-MM-DD' : format,
                timeFormat: 'HH:mm:ss',
                dateTimeFormat: format
            };
        }

        var dateFormat = formater[0];
        var timeFormat = formater[1] || 'HH:mm:ss';
        var dateTimeFormat = !hasTime ? dateFormat : [dateFormat, timeFormat];

        return {
            dateFormat: dateFormat,
            timeFormat: timeFormat,
            dateTimeFormat: dateTimeFormat
        };
    },
    toMoment: function toMoment(value, format) {
        var disabledDateCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
            return false;
        };

        if (!value) {
            return null;
        }

        var val = void 0;

        if (_nextMoment2['default'].isMoment(value) && value.isValid()) {
            val = value;
        } else if (isISODate(value)) {
            val = (0, _nextMoment2['default'])(value);
        } else if (isString(value) && isString(format)) {
            val = (0, _nextMoment2['default'])(value, format);
        }if (isString(value) && Array.isArray(format)) {
            if (format.length === 1 && isString(format[0])) {
                val = (0, _nextMoment2['default'])(value, format[0]);
            } else if (format.length === 2 && isString(format[0]) && isString(format[1])) {
                val = (0, _nextMoment2['default'])(value, format.join(' '));
            } else {
                val = (0, _nextMoment2['default'])(value);
            }
        } else {
            val = (0, _nextMoment2['default'])(value);
        }

        if (val && val.isValid() && !disabledDateCallback(getCalendarDate(val))) {
            return val;
        }

        return null;
    },


    // dateTimeFormat 可不传，如果传的话，就强制用 datTimeFormat 格式化
    parseDateParts: function parseDateParts(momentObject, dateFormat, timeFormat, dateTimeFormat) {
        if (!momentObject) {
            return {
                dateValue: null,
                dateString: '',
                timeString: '',
                dateTimeString: ''
            };
        }

        var dateValue = momentObject.toDate();
        var dateString = formatDate(dateValue, dateFormat);
        var timeString = formatDate(dateValue, timeFormat);

        var dateTimeString = void 0;
        if (Array.isArray(dateTimeFormat)) {
            dateTimeString = formatDate(dateValue, dateTimeFormat[0]) + ' ' + formatDate(dateValue, dateTimeFormat[1]);
        } else {
            dateTimeString = formatDate(dateValue, dateTimeFormat);
        }

        return {
            dateValue: dateValue,
            dateString: dateString,
            timeString: timeString,
            dateTimeString: dateTimeString
        };
    }
};

exports['default'] = utils;
module.exports = exports['default'];