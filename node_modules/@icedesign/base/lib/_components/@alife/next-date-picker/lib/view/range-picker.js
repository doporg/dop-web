'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nextIcon = require('../../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _nextInput = require('../../../next-input/lib/index.js');

var _nextInput2 = _interopRequireDefault(_nextInput);

var _nextOverlay = require('../../../next-overlay/lib/index.js');

var _nextCalendar = require('../../../next-calendar/lib/index.js');

var _nextTimePicker = require('../../../next-time-picker/lib/index.js');

var _nextUtil = require('../../../next-util/lib/index.js');

var _nextMoment = require('../../../next-moment/lib/index.js');

var _nextMoment2 = _interopRequireDefault(_nextMoment);

var _nextLocaleProvider = require('../../../next-locale-provider/lib/index.js');

var _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _quickTool = require('./quick-tool.js');

var _quickTool2 = _interopRequireDefault(_quickTool);

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function mapInputStringNameToValueName(name) {
    return {
        startDateInputStr: 'startValue',
        startTimeInputStr: 'startValue',
        endDateInputStr: 'endValue',
        endTimeInputStr: 'endValue'
    }[name];
}

function getRangeValue(values, dateFormat, disabledDate) {
    if (!Array.isArray(values)) {
        return {
            startValue: null,
            endValue: null
        };
    }

    var startValue = (0, _utils.toMoment)(values[0], dateFormat, disabledDate);
    var endValue = (0, _utils.toMoment)(values[1], dateFormat, disabledDate);

    return {
        startValue: startValue,
        endValue: endValue
    };
}

var oldFormatWrapper = function oldFormatWrapper(format) {
    // 如果用户传的 format 为 function 的话，强制重置，并提醒 format 已被废弃，使用新的 formater 进行替换
    if ((0, _utils.isFunction)(format)) {
        return function (date) {
            return date;
        };
    }
    return format;
};

/**
 * TODO:
 * 1. 受控与非受控检查
 * 2. dateInputStr/timeInputStr 使用常量隔离
 */

/** DatePicker.RangePicker */
var RangePicker = (_temp = _class = function (_Component) {
    _inherits(RangePicker, _Component);

    function RangePicker(props, context) {
        _classCallCheck(this, RangePicker);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _initialiseProps.call(_this);

        if (props.format) {
            _nextUtil.log.deprecated('format', 'formater', 'DatePicker.RangePicker');
        }

        (0, _utils.mixin)(_this, (0, _utils.getFormat)(props.formater, oldFormatWrapper(props.format), props.showTime));

        var rangeValue = getRangeValue(props.value || props.defaultValue, _this.dateTimeFormat, props.disabledDate);

        _this.state = _extends({}, rangeValue, {
            base: props.defaultBase || rangeValue.startValue,
            mode: 'month',
            startDateInputStr: '',
            endDateInputStr: '',
            startTimeInputStr: '',
            endTimeInputStr: '',
            inputing: false,
            inputingError: false,
            open: props.open || props.defaultOpen
        });
        return _this;
    }

    RangePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var showTime = 'showTime' in nextProps ? nextProps.showTime : this.props.showTime;
            (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, oldFormatWrapper(nextProps.format || this.props.format), showTime));
            var rangeValue = getRangeValue(nextProps.value, this.dateTimeFormat, nextProps.disabledDate || this.props.disabledDate);
            this.setState(_extends({}, rangeValue, {
                base: rangeValue.startValue
            }));
        }

        if ('showTime' in nextProps) {
            (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, oldFormatWrapper(nextProps.format || this.props.format), nextProps.showTime));
        }

        if ('open' in nextProps) {
            this.setState({
                open: nextProps.open
            });
        }
    };

    RangePicker.prototype.onDateInputChange = function onDateInputChange(stateName, inputString) {
        if (!('value' in this.props)) {
            var _setState;

            this.setState((_setState = {}, _defineProperty(_setState, stateName, inputString), _defineProperty(_setState, 'inputing', stateName), _setState));
        }
    };

    RangePicker.prototype.onDateInputBlur = function onDateInputBlur(stateName) {
        var _this2 = this;

        var inputString = this.state[stateName];
        if (this.state.inputing && inputString) {
            var disabledDate = this.props.disabledDate;

            if (!(0, _utils.isFunction)(this.dateFormat)) {
                var parsed = (0, _nextMoment2['default'])(inputString, this.dateFormat);
                if (parsed.isValid() && !disabledDate((0, _utils.getCalendarDate)(parsed))) {
                    var _filterObject;

                    // TODO: check showTime.defaultValue

                    this.setState((0, _utils.filterObject)((_filterObject = {}, _defineProperty(_filterObject, mapInputStringNameToValueName(stateName), parsed), _defineProperty(_filterObject, stateName, ''), _defineProperty(_filterObject, 'base', stateName === 'startDateInputStr' ? parsed : undefined), _defineProperty(_filterObject, 'inputing', false), _defineProperty(_filterObject, 'inputingError', false), _filterObject)), function () {
                        if (stateName === 'startDateInputStr') {
                            _this2.onValueChange(_this2.state.startValue, _this2.state.endValue, 'onStartChange');
                        } else {
                            _this2.onValueChange(_this2.state.startValue, _this2.state.endValue, 'onEndChange');
                        }

                        if (_this2.state.startValue && _this2.state.endValue) {
                            _this2.onValueChange(_this2.state.startValue, _this2.state.endValue);
                        }
                    });
                } else {
                    this.setState({
                        inputingError: stateName
                    });
                }
            }
        }
    };

    RangePicker.prototype.onTimeInputChange = function onTimeInputChange(stateName, inputString) {
        if (!('value' in this.props)) {
            var _setState2;

            this.setState((_setState2 = {}, _defineProperty(_setState2, stateName, inputString), _defineProperty(_setState2, 'inputing', stateName), _setState2));
        }
    };

    RangePicker.prototype.onTimeInputBlur = function onTimeInputBlur(stateName) {
        var _this3 = this;

        var inputString = this.state[stateName];
        if (this.state.inputing && inputString) {
            if (!(0, _utils.isFunction)(this.timeFormat)) {
                var parsed = (0, _nextMoment2['default'])(inputString, this.timeFormat);
                if (parsed.isValid()) {
                    var _setState3;

                    var targetState = mapInputStringNameToValueName(stateName);
                    var value = this.state[targetState].clone().hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
                    this.setState((_setState3 = {}, _defineProperty(_setState3, targetState, value), _defineProperty(_setState3, stateName, ''), _defineProperty(_setState3, 'inputing', false), _defineProperty(_setState3, 'inputingError', false), _setState3), function () {
                        if (stateName === 'startTimeInputStr') {
                            _this3.onValueChange(_this3.state.startValue, _this3.state.endValue, 'onStartChange');
                        } else {
                            _this3.onValueChange(_this3.state.startValue, _this3.state.endValue, 'onEndChange');
                        }

                        _this3.onValueChange(_this3.state.startValue, _this3.state.endValue);
                    });
                } else {
                    this.setState({
                        inputingError: stateName
                    });
                }
            }
        }
    };

    RangePicker.prototype.onOpenChange = function onOpenChange(open) {
        if (!('open' in this.props)) {
            this.setState({
                open: open
            });
        }

        this.props.onOpenChange(open);
    };

    RangePicker.prototype.disabledTime = function disabledTime(_ref) {
        var startValue = _ref.startValue,
            endValue = _ref.endValue;
        var _props = this.props,
            disabledHours = _props.disabledHours,
            disabledMinutes = _props.disabledMinutes,
            disabledSeconds = _props.disabledSeconds;

        var disabledTime = {};
        if (startValue && endValue) {

            var isSameDay = startValue.format('L') === endValue.format('L');
            var newDisabledHours = function newDisabledHours() {
                var result = (0, _utils.isFunction)(disabledHours) ? disabledHours() : [];
                if (isSameDay) {
                    for (var i = 0; i < startValue.hour(); i++) {
                        result.push(i);
                    }
                }
                return result;
            };
            var newDisabledMinutes = function newDisabledMinutes() {
                var result = (0, _utils.isFunction)(disabledMinutes) ? disabledMinutes() : [];

                if (isSameDay && startValue.hour() === endValue.hour()) {
                    for (var i = 0; i < startValue.minute(); i++) {
                        result.push(i);
                    }
                }
                return result;
            };
            var newDisabledSeconds = function newDisabledSeconds() {
                var result = (0, _utils.isFunction)(disabledSeconds) ? disabledSeconds() : [];

                if (isSameDay && startValue.hour() === endValue.hour() && startValue.minute() === endValue.minute()) {
                    for (var i = 0; i <= startValue.second(); i++) {
                        result.push(i);
                    }
                }
                return result;
            };

            disabledTime = {
                disabledHours: newDisabledHours,
                disabledMinutes: newDisabledMinutes,
                disabledSeconds: newDisabledSeconds
            };
        }

        return disabledTime;
    };

    RangePicker.prototype.clearValue = function clearValue(e) {
        e.stopPropagation();

        this.setState({
            startValue: null,
            endValue: null
        });

        this.onValueChange(null, null, 'onStartChange');
        this.onValueChange(null, null, 'onEndChange');
        this.onValueChange(null, null, 'onChange');
    };

    RangePicker.prototype.render = function render() {
        var _classNames, _classNames2, _classNames3, _classNames4, _classNames5, _classNames6;

        var _props2 = this.props,
            className = _props2.className,
            size = _props2.size,
            disabled = _props2.disabled,
            locale = _props2.locale,
            popupStyle = _props2.popupStyle,
            popupAlign = _props2.popupAlign,
            popupOffset = _props2.popupOffset,
            hasClear = _props2.hasClear,
            showTime = _props2.showTime,
            ranges = _props2.ranges,
            readOnly = _props2.readOnly,
            id = _props2.id,
            style = _props2.style,
            others = _objectWithoutProperties(_props2, ['className', 'size', 'disabled', 'locale', 'popupStyle', 'popupAlign', 'popupOffset', 'hasClear', 'showTime', 'ranges', 'readOnly', 'id', 'style']);

        var state = this.state;
        var prefix = this.context.prefix || this.props.prefix;

        var quickModule = showTime ? ['select'] : [];

        var triggerCls = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, prefix + 'date-picker', true), _defineProperty(_classNames, prefix + 'range-picker', true), _defineProperty(_classNames, prefix + 'range-picker-' + size, size), _defineProperty(_classNames, prefix + 'range-picker-disabled', disabled), _defineProperty(_classNames, prefix + 'range-picker-show-time', showTime), _defineProperty(_classNames, className, className), _classNames));
        var panelCls = (0, _classnames2['default'])((_classNames2 = {}, _defineProperty(_classNames2, prefix + 'range-picker-panel', true), _defineProperty(_classNames2, prefix + 'range-picker-panel-show-time', showTime), _classNames2));
        var iconSize = {
            large: 'medium',
            medium: 'small',
            small: 'xs'
        }[size];
        var startDateInputCls = (0, _classnames2['default'])((_classNames3 = {}, _defineProperty(_classNames3, 'focus', state.mode !== 'date' && !state.startValue && showTime), _defineProperty(_classNames3, 'error', state.inputingError === 'startDateInputStr'), _classNames3));
        var startTimeInputCls = (0, _classnames2['default'])((_classNames4 = {}, _defineProperty(_classNames4, prefix + 'range-picker-panel-time-input', true), _defineProperty(_classNames4, 'focus', state.mode === 'date' && !state.startValue && showTime), _defineProperty(_classNames4, 'error', state.inputingError === 'startTimeInputStr'), _classNames4));
        var endDateInputCls = (0, _classnames2['default'])((_classNames5 = {}, _defineProperty(_classNames5, 'focus', state.mode !== 'date' && !state.endValue && showTime), _defineProperty(_classNames5, 'error', state.inputingError === 'endDateInputStr'), _classNames5));
        var endTimeInputCls = (0, _classnames2['default'])((_classNames6 = {}, _defineProperty(_classNames6, prefix + 'range-picker-panel-time-input', true), _defineProperty(_classNames6, 'focus', state.mode === 'date' && !state.endValue && showTime), _defineProperty(_classNames6, 'error', state.inputingError === 'endTimeInputStr'), _classNames6));

        // 判断时分秒
        if (showTime && !(0, _utils.isFunction)(this.timeFormat)) {
            if (this.timeFormat.indexOf('ss') < 0) {
                others.showSecond = false;
            }
            if (this.timeFormat.indexOf('HH') < 0) {
                others.showHour = false;
            }
        }

        // 同一天禁用时间
        var disabledTime = this.disabledTime(state);

        var startValueParts = (0, _utils.parseDateParts)(state.startValue, this.dateFormat, this.timeFormat, this.dateTimeFormat);
        var endValueParts = (0, _utils.parseDateParts)(state.endValue, this.dateFormat, this.timeFormat, this.dateTimeFormat);

        var panelStartDateInputValue = state.inputing === 'startDateInputStr' ? state.startDateInputStr : state.startValue ? startValueParts.dateString : '';
        var panelEndDateInputValue = state.inputing === 'endDateInputStr' ? state.endDateInputStr : state.endValue ? endValueParts.dateString : '';

        var panelStartTimeInputVal = state.inputing === 'startTimeInputStr' ? state.startTimeInputStr : state.startValue ? startValueParts.timeString : '';
        var panelEndTimeInputVal = state.inputing === 'endTimeInputStr' ? state.endTimeInputStr : state.endValue ? endValueParts.timeString : '';

        // 组件
        var datePanel = _react2['default'].createElement(
            'div',
            { className: panelCls, style: popupStyle },
            _react2['default'].createElement(
                'div',
                { className: prefix + 'range-picker-input' },
                _react2['default'].createElement(_nextInput2['default'], {
                    className: startDateInputCls,
                    placeholder: (0, _utils.isFunction)(this.dateFormat) ? locale.selectDate : this.dateFormat,
                    disabled: disabled,
                    size: 'medium',
                    value: panelStartDateInputValue,
                    readOnly: readOnly,
                    onChange: this.onDateInputChange.bind(this, 'startDateInputStr'),
                    onBlur: this.onDateInputBlur.bind(this, 'startDateInputStr'),
                    onClick: this.onQuickChange.bind(this, 'select-date') }),
                showTime ? _react2['default'].createElement(_nextInput2['default'], {
                    className: startTimeInputCls,
                    placeholder: (0, _utils.isFunction)(this.timeFormat) ? locale.selectTime : this.timeFormat,
                    disabled: disabled || !state.startValue || !state.endValue,
                    size: 'medium',
                    value: panelStartTimeInputVal,
                    readOnly: readOnly,
                    onChange: this.onTimeInputChange.bind(this, 'startTimeInputStr'),
                    onBlur: this.onTimeInputBlur.bind(this, 'startTimeInputStr'),
                    onClick: this.onQuickChange.bind(this, 'select-time') }) : null,
                _react2['default'].createElement(
                    'span',
                    { className: prefix + 'range-picker-input-separator' },
                    '-'
                ),
                _react2['default'].createElement(_nextInput2['default'], {
                    className: endDateInputCls,
                    placeholder: (0, _utils.isFunction)(this.dateFormat) ? locale.selectDate : this.dateFormat,
                    disabled: disabled,
                    size: 'medium',
                    value: panelEndDateInputValue,
                    readOnly: readOnly,
                    onChange: this.onDateInputChange.bind(this, 'endDateInputStr'),
                    onBlur: this.onDateInputBlur.bind(this, 'endDateInputStr'),
                    onClick: this.onQuickChange.bind(this, 'select-date') }),
                showTime ? _react2['default'].createElement(_nextInput2['default'], {
                    className: endTimeInputCls,
                    placeholder: (0, _utils.isFunction)(this.timeFormat) ? locale.selectTime : this.timeFormat,
                    disabled: disabled || !state.startValue || !state.endValue,
                    size: 'medium',
                    value: panelEndTimeInputVal,
                    readOnly: readOnly,
                    onChange: this.onTimeInputChange.bind(this, 'endTimeInputStr'),
                    onBlur: this.onTimeInputBlur.bind(this, 'endTimeInputStr'),
                    onClick: this.onQuickChange.bind(this, 'select-time') }) : null
            ),
            state.mode === 'date' ? _react2['default'].createElement(
                'div',
                { className: prefix + 'range-picker-panel-time' },
                _react2['default'].createElement(_nextTimePicker.Panel, _extends({}, others, {
                    locale: locale,
                    value: state.startValue,
                    onChange: this.onSelectStartTime })),
                _react2['default'].createElement(_nextTimePicker.Panel, _extends({}, others, disabledTime, {
                    locale: locale,
                    value: state.endValue,
                    onChange: this.onSelectEndTime }))
            ) : _react2['default'].createElement(_nextCalendar.RangePickerPanel, _extends({}, others, {
                mode: state.mode,
                locale: locale,
                base: state.base,
                value: [state.startValue, state.endValue],
                onChange: this.onSelectRange })),
            _react2['default'].createElement(_quickTool2['default'], {
                value: [state.startValue, state.endValue],
                mode: state.mode,
                locale: locale,
                module: quickModule,
                shortcuts: Object.keys(ranges),
                onChange: this.onQuickChange })
        );
        var dateTrigger = _react2['default'].createElement(
            'div',
            _extends({}, (0, _nextUtil.pickAttrs)(others), { className: triggerCls, style: style, id: id }),
            _react2['default'].createElement(
                'div',
                { className: prefix + 'range-picker-trigger' },
                _react2['default'].createElement(_nextInput2['default'], {
                    placeholder: locale.rangeStartPlaceholder,
                    disabled: disabled,
                    size: size,
                    value: showTime ? startValueParts.dateTimeString : startValueParts.dateString,
                    readOnly: readOnly }),
                _react2['default'].createElement(
                    'span',
                    { className: prefix + 'range-picker-separator' },
                    '-'
                ),
                _react2['default'].createElement(_nextInput2['default'], {
                    placeholder: locale.rangeEndPlaceholder,
                    disabled: disabled,
                    size: size,
                    value: showTime ? endValueParts.dateTimeString : endValueParts.dateString,
                    readOnly: readOnly })
            ),
            (state.startValue || state.endValue) && !disabled && hasClear ? _react2['default'].createElement(_nextIcon2['default'], { type: 'delete-filling', size: iconSize, title: locale.clear, onClick: this.clearValue.bind(this) }) : _react2['default'].createElement(_nextIcon2['default'], { type: 'calendar', size: iconSize })
        );

        return _react2['default'].createElement(
            _nextOverlay.Popup,
            _extends({}, others, {
                autoFocus: false,
                disabled: disabled,
                visible: state.open,
                trigger: dateTrigger,
                triggerType: 'click',
                align: popupAlign,
                offset: popupOffset,
                onVisibleChange: this.onOpenChange.bind(this)
            }),
            datePanel
        );
    };

    return RangePicker;
}(_react.Component), _class.propTypes = {
    /**
     * 品牌样式前缀
     */
    prefix: _propTypes2['default'].string,
    /**
     * 默认的基准日期
     */
    defaultBase: _propTypes2['default'].string,
    /**
     * 默认日期值
     */
    defaultValue: _propTypes2['default'].array,
    /**
     * 日期值
     */
    value: _propTypes2['default'].array,
    /**
     * 日期禁用
     * @param {Object} CalendarObject
     * @return {Boolean} true 表示禁用，反之表示可用
     */
    disabledDate: _propTypes2['default'].func,
    /**
     * 禁用指定的小时，同 TimePicker
     */
    disabledHours: _propTypes2['default'].func,
    /**
     * 禁用指定的分钟，同 TimePicker
     */
    disabledMinutes: _propTypes2['default'].func,
    /**
     * 禁用指定的秒钟，同 TimePicker
     */
    disabledSeconds: _propTypes2['default'].func,
    /**
     * 时间发生改变的回调
     * @param {Array} dateRange        选中的日期区间数组
     * @param {Array} formatDateRnage  格式化后的选中的日期区间数组
     */
    onChange: _propTypes2['default'].func,
    /**
     * 开始日期变化时的回调
     * @param {String} date 开始日期
     */
    onStartChange: _propTypes2['default'].func,
    /**
     * 结束日期变化时的回调
     * @param {String} date 结束日期
     */
    onEndChange: _propTypes2['default'].func,
    /**
     * 默认是否展开
     */
    defaultOpen: _propTypes2['default'].bool,
    /**
     * 是否展开
     */
    open: _propTypes2['default'].bool,
    /**
     * 当面板展开状态改变时的回调
     * @param {Boolean} 面板的 open 状态
     */
    onOpenChange: _propTypes2['default'].func,
    /**
     * 输入框大小
     */
    size: _propTypes2['default'].oneOf(['small', 'medium', 'large']),
    /**
     * 语言
     */
    language: _propTypes2['default'].oneOf(['en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw']),
    /**
     * 国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)
     */
    locale: _propTypes2['default'].object,
    /**
     * 弹层样式
     */
    popupStyle: _propTypes2['default'].object,
    /**
     * 弹层对其方式
     */
    popupAlign: _propTypes2['default'].string,
    /**
     * 弹层偏移
     */
    popupOffset: _propTypes2['default'].array,
    /**
     * 输出日期的格式
     */
    format: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func]),
    /**
     * 日期值格式化（可替代 format）
     */
    formater: _propTypes2['default'].array,
    /**
     * 是否禁用
     */
    disabled: _propTypes2['default'].bool,
    /**
     * 是否有清空按钮
     */
    hasClear: _propTypes2['default'].bool,
    /**
     * 是否显示时间或传入 { defaultValue } 设置时间初值
     */
    showTime: _propTypes2['default'].oneOfType([_propTypes2['default'].bool, _propTypes2['default'].object]),
    /**
     * 重新选择时是否重置时间
     */
    resetTime: _propTypes2['default'].bool,
    /**
     * 用户预设的快捷选择的日期范围
     */
    ranges: _propTypes2['default'].object,
    /**
     * 输入框是否只读
     */
    readOnly: _propTypes2['default'].bool,
    /**
     * 自定义组件样式
     */
    className: _propTypes2['default'].string,
    id: _propTypes2['default'].any,
    style: _propTypes2['default'].object
}, _class.defaultProps = {
    prefix: 'next-',
    size: 'medium',
    popupAlign: 'tl tl',
    popupOffset: [0, 0],
    formater: ['YYYY-MM-DD', 'HH:mm:ss'],
    hasClear: true,
    showTime: false,
    resetTime: true,
    ranges: {},
    disabledDate: function disabledDate() {
        return false;
    },
    onChange: function onChange() {},
    onStartChange: function onStartChange() {},
    onEndChange: function onEndChange() {},
    onOpenChange: function onOpenChange() {}
}, _class.contextTypes = {
    prefix: _propTypes2['default'].string
}, _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.onValueChange = function (startValue, endValue) {
        var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'onChange';
        var showTime = _this4.props.showTime;

        var startValueParts = (0, _utils.parseDateParts)(startValue, _this4.dateFormat, _this4.timeFormat, _this4.dateTimeFormat);
        var endValueParts = (0, _utils.parseDateParts)(endValue, _this4.dateFormat, _this4.timeFormat, _this4.dateTimeFormat);

        var formatStrings = showTime ? [startValueParts.dateTimeString, endValueParts.dateTimeString] : [startValueParts.dateString, endValueParts.dateString];

        switch (handler) {
            case 'onStartChange':
                _this4.props[handler](startValueParts.dateValue, formatStrings[0]);
                break;
            case 'onEndChange':
                _this4.props[handler](endValueParts.dateValue, formatStrings[1]);
                break;
            case 'onChange':
                {
                    _this4.props[handler]([startValueParts.dateValue, endValueParts.dateValue], formatStrings);
                    break;
                }
            default:
        }
    };

    this.onSelectRange = function (_ref2) {
        var value = _ref2.value,
            base = _ref2.base,
            mode = _ref2.mode;
        var _props3 = _this4.props,
            showTime = _props3.showTime,
            resetTime = _props3.resetTime;

        var state = _this4.state;

        if (mode === 'date') {
            var defaultStartHour = 0;
            var defaultStartMinute = 0;
            var defaultStartSecond = 0;
            var defaultEndHour = 0;
            var defaultEndMinute = 0;
            var defaultEndSecond = 0;

            if (showTime) {
                if (showTime.defaultValue) {
                    var defaultStartTimeValue = (0, _utils.toMoment)(showTime.defaultValue[0], _this4.timeFormat);
                    var defaultEndTimeValue = (0, _utils.toMoment)(showTime.defaultValue[1], _this4.timeFormat);
                    if (defaultStartTimeValue) {
                        defaultStartHour = defaultStartTimeValue.hour();
                        defaultStartMinute = defaultStartTimeValue.minute();
                        defaultStartSecond = defaultStartTimeValue.second();
                    }

                    if (defaultEndTimeValue) {
                        defaultEndHour = defaultEndTimeValue.hour();
                        defaultEndMinute = defaultEndTimeValue.minute();
                        defaultEndSecond = defaultEndTimeValue.second();
                    }
                }

                // resetTime=false 表示不重置时间，每次沿用上一次选择的时间
                if (!resetTime) {
                    if (state.startValue) {
                        defaultStartHour = state.startValue.hour();
                        defaultStartMinute = state.startValue.minute();
                        defaultStartSecond = state.startValue.second();
                    }

                    if (_this4.lastSelectedEndValue) {
                        defaultEndHour = _this4.lastSelectedEndValue.hour();
                        defaultEndMinute = _this4.lastSelectedEndValue.minute();
                        defaultEndSecond = _this4.lastSelectedEndValue.second();
                    }
                }
            }

            if (value[0] && (!state.startValue || state.startValue.valueOf() !== value[0].valueOf())) {
                value[0] = value[0].hour(defaultStartHour).minute(defaultStartMinute).second(defaultStartSecond);
                _this4.onValueChange(value[0], null, 'onStartChange');
            }

            if (value[1]) {
                value[1] = value[1].hour(defaultEndHour).minute(defaultEndMinute).second(defaultEndSecond);
                _this4.onValueChange(value[0], value[1], 'onEndChange');
            }

            var newState = (0, _utils.filterObject)({
                startValue: value[0],
                endValue: value[1]
            });

            var newStartValue = newState.startValue || _this4.state.startValue;
            var newEndValue = newState.endValue || _this4.state.endValue;
            _this4.lastSelectedEndValue = newEndValue; // 记住上次选择的结束日期

            _this4.setState(newState);

            if (value[0] && value[1]) {
                _this4.onValueChange(newStartValue, newEndValue, 'onChange');
            }

            // 判断收起弹层
            if (!_this4.props.showTime && value[0] && value[1]) {
                _this4.onOpenChange(false);
            }
        } else {
            _this4.setState({
                base: base,
                mode: mode
            });
        }
    };

    this.onSelectStartTime = function (value) {
        if (!('value' in _this4.props)) {
            _this4.setState({
                startValue: value
            });
        }

        if (value.valueOf() !== _this4.state.startValue.valueOf()) {
            _this4.onValueChange(value, _this4.state.endValue, 'onStartChange');
            _this4.onValueChange(value, _this4.state.endValue, 'onChange');
        }
    };

    this.onSelectEndTime = function (value) {
        if (!('value' in _this4.props)) {
            _this4.setState({
                endValue: value
            });
        }

        if (value.valueOf() !== _this4.state.endValue.valueOf()) {
            _this4.onValueChange(_this4.state.startValue, value, 'onEndChange');
            _this4.onValueChange(_this4.state.startValue, value, 'onChange');
        }
    };

    this.onQuickChange = function (type, value) {
        var _props4 = _this4.props,
            ranges = _props4.ranges,
            disabledDate = _props4.disabledDate;


        switch (type) {
            case 'select-date':
                _this4.setState({
                    mode: 'month'
                });
                break;
            case 'select-time':
                _this4.setState({
                    mode: 'date'
                });
                break;
            case 'ok':
                _this4.onOpenChange(false);
                break;
            case 'quick-select':
                {
                    // 判断是否是快捷选择操作
                    var range = ranges[value];
                    if (range && value) {
                        var rangeValue = getRangeValue(range, _this4.dateFormat, disabledDate);
                        _this4.setState(rangeValue, function () {
                            _this4.onValueChange(_this4.state.startValue, _this4.state.endValue, 'onChange');
                            _this4.onOpenChange(false);
                        });
                    }
                    break;
                }
            default:
                break;
        }
    };
}, _temp);
RangePicker.displayName = 'RangePicker';
exports['default'] = (0, _nextLocaleProvider2['default'])(RangePicker);
module.exports = exports['default'];