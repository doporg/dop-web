'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nextIcon = require('../../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _nextInput = require('../../../next-input/lib/index.js');

var _nextInput2 = _interopRequireDefault(_nextInput);

var _nextOverlay = require('../../../next-overlay/lib/index.js');

var _nextCalendar = require('../../../next-calendar/lib/index.js');

var _nextTimePicker = require('../../../next-time-picker/lib/index.js');

var _nextUtil = require('../../../next-util/lib/index.js');

var _nextMoment = require('../../../next-moment/lib/index.js');

var _nextMoment2 = _interopRequireDefault(_nextMoment);

var _nextLocaleProvider = require('../../../next-locale-provider/lib/index.js');

var _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _quickTool = require('./quick-tool.js');

var _quickTool2 = _interopRequireDefault(_quickTool);

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function getValue(value, dateFormat, disabledDate) {
    if (!value) {
        return null;
    }

    return (0, _utils.toMoment)(value, dateFormat, disabledDate);
}

/** DatePicker */
var DatePicker = (_temp = _class = function (_Component) {
    _inherits(DatePicker, _Component);

    function DatePicker(props, context) {
        _classCallCheck(this, DatePicker);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.onValueChange = function (value) {
            var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onChange';
            var showTime = _this.props.showTime;

            var valueParts = (0, _utils.parseDateParts)(value, _this.dateFormat, _this.timeFormat, _this.dateTimeFormat);
            var formatString = showTime ? valueParts.dateTimeString : valueParts.dateString;
            _this.props[handler](valueParts.dateValue, formatString);
        };

        _this.onSelectDate = function (_ref) {
            var base = _ref.base,
                value = _ref.value,
                mode = _ref.mode,
                from = _ref.from;

            var newState = {
                base: base,
                mode: mode
            };

            if (value) {
                switch (mode) {
                    case 'date':
                        {
                            var showTime = _this.props.showTime;


                            var defaultHour = 0;
                            var defaultMinute = 0;
                            var defaultSecond = 0;

                            if (showTime && showTime.defaultValue) {
                                var defaultTimeValue = (0, _utils.toMoment)(showTime.defaultValue, _this.timeFormat);
                                if (defaultTimeValue) {
                                    defaultHour = defaultTimeValue.hour();
                                    defaultMinute = defaultTimeValue.minute();
                                    defaultSecond = defaultTimeValue.second();
                                }
                            }

                            value = value.hour(defaultHour).minute(defaultMinute).second(defaultSecond);
                            newState.mode = from === 'select-time' ? 'date' : 'month';

                            if (!('value' in _this.props)) {
                                newState.value = value;
                            }

                            if (!from && !_this.props.showTime) {
                                _this.onOpenChange(false);
                            }
                            break;
                        }
                    case 'year':
                        {
                            newState.base = value;
                            break;
                        }
                    case 'month':
                        {
                            newState.base = value;
                            break;
                        }
                    default:
                }
            }

            _this.setState(newState);

            if (mode === 'date' && (!_this.state.value || value.valueOf() !== _this.state.value.valueOf())) {
                _this.onValueChange(value, 'onChange');
            }
        };

        _this.onSelectTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    value: value
                });
            }

            if (value.valueOf() !== _this.state.value.valueOf()) {
                _this.onValueChange(value, 'onChange');
            }
        };

        _this.onOpenChange = function (open) {
            if (!('open' in _this.props)) {
                _this.setState({
                    open: open
                });
            }

            _this.props.onOpenChange(open);
        };

        _this.onQuickChange = function (type) {
            switch (type) {
                case 'now':
                    {
                        var now = (0, _nextMoment2['default'])();
                        _this.setState({
                            base: now,
                            value: now,
                            mode: 'month'
                        });
                        _this.onValueChange(now);
                        _this.onOpenChange(false);
                        break;
                    }
                case 'select-date':
                    _this.setState({
                        mode: 'month'
                    });
                    break;
                case 'select-time':
                    _this.setState({
                        mode: 'date'
                    });
                    break;
                case 'ok':
                    _this.onOpenChange(false);
                    break;
                default:
                    break;
            }
        };

        _this.clearValue = function (e) {
            e.stopPropagation();

            _this.setState({
                base: (0, _nextMoment2['default'])(),
                value: null
            });
            _this.onValueChange(null);
        };

        if (props.format) {
            _nextUtil.log.deprecated('format', 'formater', 'DatePicker');
        }

        (0, _utils.mixin)(_this, (0, _utils.getFormat)(props.formater, props.format, props.showTime));

        var normalizeValue = getValue(props.value || props.defaultValue, _this.dateTimeFormat, props.disabledDate);

        _this.state = {
            value: normalizeValue,
            base: props.defaultBase || normalizeValue,
            mode: 'month',
            dateInputStr: '',
            timeInputStr: '',
            inputing: false,
            inputingError: false,
            open: props.open || props.defaultOpen
        };
        return _this;
    }

    DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var showTime = 'showTime' in nextProps ? nextProps.showTime : this.props.showTime;
            (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, nextProps.format || this.props.format, showTime));
            var normalizeValue = getValue(nextProps.value, this.dateTimeFormat, nextProps.disabledDate || this.props.disabledDate);

            this.setState({
                value: normalizeValue,
                base: normalizeValue
            });
        }

        if ('showTime' in nextProps) {
            (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, nextProps.format || this.props.format, nextProps.showTime));
        }

        if ('open' in nextProps) {
            this.setState({
                open: nextProps.open
            });
        }
    };

    DatePicker.prototype.onInputChange = function onInputChange(stateName, inputString) {
        if (!('value' in this.props)) {
            var _setState;

            this.setState((_setState = {}, _defineProperty(_setState, stateName, inputString), _defineProperty(_setState, 'inputing', stateName), _setState));
        }
    };

    DatePicker.prototype.onInputBlur = function onInputBlur(stateName) {
        var _this2 = this;

        var inputString = this.state[stateName];
        if (this.state.inputing && inputString) {
            var _props = this.props,
                showTime = _props.showTime,
                disabledDate = _props.disabledDate;

            var format = stateName === 'dateInputStr' ? this.dateFormat : this.timeFormat;
            if (!(0, _utils.isFunction)(format)) {
                var parsed = (0, _nextMoment2['default'])(inputString, format);
                if (parsed.isValid() && !disabledDate((0, _utils.getCalendarDate)(parsed))) {
                    var _setState2;

                    var value = parsed;
                    if (stateName === 'timeInputStr') {
                        value = this.state.value.clone().hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
                    } else if (showTime && showTime.defaultValue) {
                        // set defaultValue of time
                        var defaultTimeValue = (0, _utils.toMoment)(showTime.defaultValue, this.timeFormat);
                        var defaultHour = defaultTimeValue.hour();
                        var defaultMinute = defaultTimeValue.minute();
                        var defaultSecond = defaultTimeValue.second();
                        value = value.hour(defaultHour).minute(defaultMinute).second(defaultSecond);
                    }

                    this.setState((_setState2 = {
                        value: value,
                        base: value
                    }, _defineProperty(_setState2, stateName, ''), _defineProperty(_setState2, 'inputing', false), _defineProperty(_setState2, 'inputingError', false), _setState2), function () {
                        _this2.onValueChange(_this2.state.value);
                    });
                } else {
                    this.setState({
                        inputingError: stateName
                    });
                }
            }
        }
    };

    DatePicker.prototype.render = function render() {
        var _classNames, _classNames2, _classNames3, _classNames4;

        var _props2 = this.props,
            className = _props2.className,
            size = _props2.size,
            disabled = _props2.disabled,
            locale = _props2.locale,
            popupStyle = _props2.popupStyle,
            popupAlign = _props2.popupAlign,
            popupOffset = _props2.popupOffset,
            hasClear = _props2.hasClear,
            showTime = _props2.showTime,
            readOnly = _props2.readOnly,
            id = _props2.id,
            style = _props2.style,
            others = _objectWithoutProperties(_props2, ['className', 'size', 'disabled', 'locale', 'popupStyle', 'popupAlign', 'popupOffset', 'hasClear', 'showTime', 'readOnly', 'id', 'style']);

        var state = this.state;

        var prefix = this.context.prefix || this.props.prefix;
        var quickModule = showTime ? ['now', 'select'] : ['now'];

        // 样式
        var triggerCls = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, prefix + 'date-picker', true), _defineProperty(_classNames, prefix + 'date-picker-' + size, size), _defineProperty(_classNames, prefix + 'date-picker-disabled', disabled), _defineProperty(_classNames, prefix + 'date-picker-show-time', showTime), _defineProperty(_classNames, className, className), _classNames));
        var panelCls = (0, _classnames2['default'])((_classNames2 = {}, _defineProperty(_classNames2, prefix + 'date-picker-panel', true), _defineProperty(_classNames2, prefix + 'date-picker-panel-show-time', showTime), _classNames2));
        var iconSize = {
            large: 'medium',
            medium: 'small',
            small: 'xs'
        }[size];
        var dateInputCls = (0, _classnames2['default'])((_classNames3 = {}, _defineProperty(_classNames3, 'error', state.inputingError === 'dateInputStr'), _defineProperty(_classNames3, 'focus', state.mode !== 'date' && showTime), _classNames3));
        var timeInputCls = (0, _classnames2['default'])((_classNames4 = {}, _defineProperty(_classNames4, 'error', state.inputingError === 'timeInputStr'), _defineProperty(_classNames4, 'focus', state.mode === 'date' && showTime), _classNames4));

        // 判断时分秒
        if (showTime && typeof this.timeFormat === 'string') {
            if (this.timeFormat.indexOf('HH') < 0) {
                others.showHour = false;
            }

            if (this.timeFormat.indexOf('mm') < 0) {
                others.showMinute = false;
            }

            if (this.timeFormat.indexOf('ss') < 0) {
                others.showSecond = false;
            }
        }

        var valueParts = (0, _utils.parseDateParts)(state.value, this.dateFormat, this.timeFormat, this.dateTimeFormat);
        var panelDateInputValue = state.inputing === 'dateInputStr' ? state.dateInputStr : state.value ? valueParts.dateString : '';
        var panelTimeInputValue = state.inputing === 'timeInputStr' ? state.timeInputStr : state.value ? valueParts.timeString : '';

        // 组件
        var datePanel = _react2['default'].createElement(
            'div',
            { className: panelCls, style: popupStyle },
            _react2['default'].createElement(
                'div',
                { className: prefix + 'date-picker-input' },
                _react2['default'].createElement(_nextInput2['default'], {
                    className: dateInputCls,
                    placeholder: (0, _utils.isFunction)(this.dateFormat) ? locale.selectDate : this.dateFormat,
                    disabled: disabled,
                    size: 'medium',
                    value: panelDateInputValue,
                    readOnly: readOnly,
                    onChange: this.onInputChange.bind(this, 'dateInputStr'),
                    onBlur: this.onInputBlur.bind(this, 'dateInputStr'),
                    onClick: this.onQuickChange.bind(this, 'select-date') }),
                showTime ? _react2['default'].createElement(_nextInput2['default'], {
                    className: timeInputCls,
                    placeholder: (0, _utils.isFunction)(this.timeFormat) ? locale.selectTime : this.timeFormat,
                    disabled: disabled || !state.value,
                    size: 'medium',
                    value: panelTimeInputValue,
                    readOnly: readOnly,
                    onChange: this.onInputChange.bind(this, 'timeInputStr'),
                    onBlur: this.onInputBlur.bind(this, 'timeInputStr'),
                    onClick: !state.value ? null : this.onQuickChange.bind(this, 'select-time') }) : null
            ),
            state.mode === 'date' ? _react2['default'].createElement(_nextTimePicker.Panel, _extends({}, others, {
                locale: locale,
                value: state.value,
                onChange: this.onSelectTime })) : _react2['default'].createElement(_nextCalendar.DatePickerPanel, _extends({}, others, {
                mode: state.mode,
                locale: locale,
                base: state.base,
                value: state.value,
                onChange: this.onSelectDate })),
            _react2['default'].createElement(_quickTool2['default'], _extends({}, others, { value: state.value, mode: state.mode, locale: locale, module: quickModule, onChange: this.onQuickChange.bind(this) }))
        );
        var dateTrigger = _react2['default'].createElement(
            'div',
            _extends({}, (0, _nextUtil.pickAttrs)(others), { className: triggerCls, style: style, id: id }),
            _react2['default'].createElement(_nextInput2['default'], {
                placeholder: locale.datePlaceholder,
                readOnly: readOnly,
                disabled: disabled,
                size: size,
                value: showTime ? valueParts.dateTimeString : valueParts.dateString }),
            state.value && !disabled && hasClear ? _react2['default'].createElement(_nextIcon2['default'], { type: 'delete-filling', size: iconSize, title: locale.clear, onClick: this.clearValue }) : _react2['default'].createElement(_nextIcon2['default'], { type: 'calendar', size: iconSize })
        );

        return _react2['default'].createElement(
            _nextOverlay.Popup,
            _extends({}, others, {
                autoFocus: false,
                disabled: disabled,
                visible: state.open,
                trigger: dateTrigger,
                triggerType: 'click',
                align: popupAlign,
                offset: popupOffset,
                onVisibleChange: this.onOpenChange
            }),
            datePanel
        );
    };

    return DatePicker;
}(_react.Component), _class.propTypes = {
    /**
     * 品牌样式前缀
     */
    prefix: _propTypes2['default'].string,
    /**
     * 默认的基准日期
     */
    defaultBase: _propTypes2['default'].string,
    /**
     * 默认日期
     */
    defaultValue: _propTypes2['default'].any,
    /**
     * 日期值
     */
    value: _propTypes2['default'].any,
    /**
     * 日期禁用
     * @param {Object} CalendarObject
     * @return {Boolean} true 表示禁用，反之表示可用
     */
    disabledDate: _propTypes2['default'].func,
    /**
     * 时间发生改变时的回调函数
     * @param {String} date       改变后的日期
     * @param {String} formatDate 改变后的格式化日期
     */
    onChange: _propTypes2['default'].func,
    /**
     * 是否默认展开
     */
    defaultOpen: _propTypes2['default'].bool,
    /**
     * 是否展开
     */
    open: _propTypes2['default'].bool,
    /**
     * 当面板展开状态改变时的回调函数
     * @param {Boolean} open 面板的展开状态
     */
    onOpenChange: _propTypes2['default'].func,
    /**
     * 输入框大小
     */
    size: _propTypes2['default'].oneOf(['small', 'medium', 'large']),
    /**
     * 语言
     */
    language: _propTypes2['default'].oneOf(['en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw']),
    /**
     * 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)
     */
    locale: _propTypes2['default'].object,
    /**
     * 弹层面板样式
     */
    popupStyle: _propTypes2['default'].object,
    /**
     * 弹层对齐方式
     */
    popupAlign: _propTypes2['default'].string,
    /**
     * 弹层偏移
     */
    popupOffset: _propTypes2['default'].array,
    format: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func]),
    /**
     * 日期格式化
     */
    formater: _propTypes2['default'].array,
    /**
     * 是否禁用
     */
    disabled: _propTypes2['default'].bool,
    /**
     * 是否展示清空按钮
     */
    hasClear: _propTypes2['default'].bool,
    /**
     * 是否展示时间选择或传入 { defaultValue } 设置时间初值
     */
    showTime: _propTypes2['default'].oneOfType([_propTypes2['default'].bool, _propTypes2['default'].object]),
    /**
     * 输入框是否只读
     */
    readOnly: _propTypes2['default'].bool,
    /**
     * 自定义组件样式
     */
    className: _propTypes2['default'].string,
    id: _propTypes2['default'].any,
    style: _propTypes2['default'].object
}, _class.defaultProps = {
    prefix: 'next-',
    size: 'medium',
    popupAlign: 'tl tl',
    popupOffset: [0, 0],
    formater: ['YYYY-MM-DD', 'HH:mm:ss'],
    disabledDate: function disabledDate() {
        return false;
    },
    hasClear: true,
    readOnly: false,
    onChange: function onChange() {},
    onOpenChange: function onOpenChange() {}
}, _class.contextTypes = {
    prefix: _propTypes2['default'].string
}, _temp);
DatePicker.displayName = 'DatePicker';
exports['default'] = (0, _nextLocaleProvider2['default'])(DatePicker);
module.exports = exports['default'];