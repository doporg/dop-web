"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _fileType = _interopRequireDefault(require("file-type"));

var _path = _interopRequireDefault(require("path"));

var _postcss = _interopRequireDefault(require("postcss"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const urlReg = /url\(('|")?((?:http|\/\/)(?:[^"']+))(\1)\)/;

const getDeclUrl = value => {
  const url = value.match(urlReg)[2];

  const md5 = _crypto.default.createHash('md5');

  const urlIdentity = md5.update(url).digest('hex');
  return {
    urlIdentity,
    url
  };
};

var _default = _postcss.default.plugin('postcss-assets', ({
  outputOptions,
  options
}, opts = {}) => {
  // 所有 css 中的网络请求
  const networkRequestMap = {};
  return root => {
    return new Promise(resolve => {
      // 字体文件
      root.walkAtRules(atrule => {
        atrule.walkDecls(decl => {
          if (decl.prop == 'src') {
            decl.value.split(',').forEach(value => {
              if (urlReg.test(value)) {
                const _getDeclUrl = getDeclUrl(value),
                      url = _getDeclUrl.url,
                      urlIdentity = _getDeclUrl.urlIdentity;

                networkRequestMap[urlIdentity] = {
                  url,
                  decl
                };
              }
            });
          }
        });
      }); // 常规 css

      root.walkRules(rule => {
        rule.walkDecls(decl => {
          if (decl.prop == 'background-image' || decl.prop == 'background') {
            if (urlReg.test(decl.value)) {
              const _getDeclUrl2 = getDeclUrl(decl.value),
                    url = _getDeclUrl2.url,
                    urlIdentity = _getDeclUrl2.urlIdentity;

              networkRequestMap[urlIdentity] = {
                url,
                decl
              };
            }
          }
        });
      });

      if (Object.keys(networkRequestMap).length > 0) {
        Promise.all(Object.entries(networkRequestMap).map(([urlIdentity, networkRequest]) => {
          const originUrl = networkRequest.url;
          const url = originUrl.startsWith('http') ? originUrl : `http:${originUrl}`;
          return _requestPromise.default.get(_objectSpread({
            url,
            encoding: null
          }, options.requsetOptions)).then(res => {
            const buffer = Buffer.from(res, 'utf-8');

            const fileExtName = _path.default.extname(url);

            const fileExtType = (0, _fileType.default)(buffer);

            const md5 = _crypto.default.createHash('md5');

            const ext = fileExtType && fileExtType.ext ? `.${fileExtType.ext}` : fileExtName;
            const basename = md5.update(buffer).digest('hex') + ext;

            const contextPath = _path.default.join(options.relativeCssPath, options.outputPath, basename).replace(/\\/g, '/');

            const outputPath = _path.default.join(options.outputPath, basename).replace(/\\/g, '/');

            const asset = {
              contents: buffer,
              contextPath,
              outputPath,
              basename
            };
            networkRequestMap[urlIdentity] = asset;
            opts.emit(asset);
            return Promise.resolve(asset);
          }).catch(err => {
            console.log(_chalk.default.cyan('[ExtractCssAssetsWebpackPlugin]'), _chalk.default.yellow('Warning:'), 'Asset download failed', _chalk.default.blue.underline(url));
            console.log('   ', err.error.toString());
            delete networkRequestMap[urlIdentity];
          });
        })).then(() => {
          // 字体文件
          root.walkAtRules(atrule => {
            atrule.walkDecls(decl => {
              if (decl.prop == 'src') {
                const newValue = decl.value.split(',').map(value => {
                  if (urlReg.test(value)) {
                    const _getDeclUrl3 = getDeclUrl(value),
                          urlIdentity = _getDeclUrl3.urlIdentity;

                    return value.replace(urlReg, str => {
                      if (networkRequestMap[urlIdentity] && networkRequestMap[urlIdentity].contextPath) {
                        return `url('${networkRequestMap[urlIdentity].contextPath}')`;
                      }

                      return str;
                    });
                  }

                  return value;
                }).join(',');
                decl.value = newValue;
              }
            });
          }); // 常规 css

          root.walkRules(rule => {
            rule.walkDecls(decl => {
              if (decl.prop == 'background-image' || decl.prop == 'background') {
                if (urlReg.test(decl.value)) {
                  const _getDeclUrl4 = getDeclUrl(decl.value),
                        urlIdentity = _getDeclUrl4.urlIdentity;

                  decl.value = decl.value.replace(urlReg, str => {
                    if (networkRequestMap[urlIdentity] && networkRequestMap[urlIdentity].contextPath) {
                      return `url('${networkRequestMap[urlIdentity].contextPath}')`;
                    }

                    return str;
                  });
                }
              }
            });
          });
          resolve();
        });
      } else {
        resolve();
      }
    });
  };
});

exports.default = _default;