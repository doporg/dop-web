"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webpackSources = require("webpack-sources");

var _postcss = _interopRequireDefault(require("postcss"));

var _processAssets = _interopRequireDefault(require("./process-assets"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import webpack from 'webpack';
class ExtractCssAssetsPlugin {
  constructor(options) {
    this.options = Object.assign({
      outputPath: '',
      relativeCssPath: '',
      requsetOptions: {
        timeout: 5000
      }
    }, options);
  }

  apply(compiler) {
    const options = this.options;
    compiler.hooks.emit.tapPromise('ExtractCssAssetsPlugin', compilation => {
      const outputOptions = compilation.outputOptions;
      const collectChunks = []; // 收集资源

      if (/(https?:)?\/\//.test(outputOptions.publicPath)) {
        return Promise.resolve();
      }

      return Promise.all(Object.keys(compilation.assets).map(filename => {
        let asset = compilation.assets[filename];

        if (filename.endsWith('.css')) {
          const css = asset.source();
          return new Promise(resolve => {
            (0, _postcss.default)().use(new _processAssets.default({
              outputOptions,
              compilation,
              options
            }, {
              emit: chunk => {
                collectChunks.push(chunk);
              }
            })).process(css, {
              from: filename,
              to: filename
            }).then(result => {
              compilation.assets[filename] = new _webpackSources.RawSource(result.css);
              resolve();
            });
          });
        }

        return null;
      }).filter(Boolean)).then(() => {
        if (collectChunks.length > 0) {
          return Promise.all(collectChunks.map(chunk => {
            return new Promise((resolve, reject) => {
              if (chunk.outputPath) {
                const file = new _webpackSources.RawSource(chunk.contents);
                compilation.assets[chunk.outputPath] = file;
                resolve();
              } else {
                reject();
              }
            });
          }));
        }

        return Promise.resolve();
      }).catch(error => {
        throw error;
      });
    });
  }

}

var _default = ExtractCssAssetsPlugin;
exports.default = _default;